
CLF_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000745c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  08007630  08007630  00017630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f00  08007f00  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f08  08007f08  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000088  08007f98  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08007f98  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ac  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002354  00000000  00000000  00030864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  00032bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232d9  00000000  00000000  00034b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d01a  00000000  00000000  00057e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d69cf  00000000  00000000  00064e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  0013b8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007614 	.word	0x08007614

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08007614 	.word	0x08007614

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 fd51 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f004 fc7e 	bl	80058ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fd69 	bl	8001ab2 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 fd31 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000001c 	.word	0x2000001c
 8001014:	20000004 	.word	0x20000004
 8001018:	20000000 	.word	0x20000000

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000004 	.word	0x20000004
 8001040:	200004dc 	.word	0x200004dc

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200004dc 	.word	0x200004dc

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_Delay+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e033      	b.n	800111e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f004 fc1c 	bl	80058fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d118      	bne.n	8001110 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	f043 0202 	orr.w	r2, r3, #2
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fa5a 	bl	80015ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
 800110e:	e001      	b.n	8001114 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_ADC_Start_DMA+0x1e>
 8001142:	2302      	movs	r3, #2
 8001144:	e0cc      	b.n	80012e0 <HAL_ADC_Start_DMA+0x1b8>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d018      	beq.n	800118e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <HAL_ADC_Start_DMA+0x1c0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a5e      	ldr	r2, [pc, #376]	; (80012ec <HAL_ADC_Start_DMA+0x1c4>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9a      	lsrs	r2, r3, #18
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001180:	e002      	b.n	8001188 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	3b01      	subs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	f040 80a0 	bne.w	80012de <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011dc:	d106      	bne.n	80011ec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f023 0206 	bic.w	r2, r3, #6
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
 80011ea:	e002      	b.n	80011f2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_ADC_Start_DMA+0x1c8>)
 80011fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <HAL_ADC_Start_DMA+0x1cc>)
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <HAL_ADC_Start_DMA+0x1d0>)
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	4a3a      	ldr	r2, [pc, #232]	; (80012fc <HAL_ADC_Start_DMA+0x1d4>)
 8001214:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800121e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800122e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800123e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	334c      	adds	r3, #76	; 0x4c
 800124a:	4619      	mov	r1, r3
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f000 fcea 	bl	8001c28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2b00      	cmp	r3, #0
 800125e:	d12a      	bne.n	80012b6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_ADC_Start_DMA+0x1d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d015      	beq.n	8001296 <HAL_ADC_Start_DMA+0x16e>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a25      	ldr	r2, [pc, #148]	; (8001304 <HAL_ADC_Start_DMA+0x1dc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d105      	bne.n	8001280 <HAL_ADC_Start_DMA+0x158>
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_ADC_Start_DMA+0x1c8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a20      	ldr	r2, [pc, #128]	; (8001308 <HAL_ADC_Start_DMA+0x1e0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d129      	bne.n	80012de <HAL_ADC_Start_DMA+0x1b6>
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_ADC_Start_DMA+0x1c8>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d823      	bhi.n	80012de <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11c      	bne.n	80012de <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e013      	b.n	80012de <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_ADC_Start_DMA+0x1d8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d10e      	bne.n	80012de <HAL_ADC_Start_DMA+0x1b6>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d107      	bne.n	80012de <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000001c 	.word	0x2000001c
 80012ec:	431bde83 	.word	0x431bde83
 80012f0:	40012300 	.word	0x40012300
 80012f4:	080017a5 	.word	0x080017a5
 80012f8:	0800185f 	.word	0x0800185f
 80012fc:	0800187b 	.word	0x0800187b
 8001300:	40012000 	.word	0x40012000
 8001304:	40012100 	.word	0x40012100
 8001308:	40012200 	.word	0x40012200

0800130c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e113      	b.n	800158c <HAL_ADC_ConfigChannel+0x244>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_ADC_ConfigChannel+0x250>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a28      	ldr	r2, [pc, #160]	; (800159c <HAL_ADC_ConfigChannel+0x254>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d10f      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1d8>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d10b      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_ADC_ConfigChannel+0x254>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_ADC_ConfigChannel+0x258>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d003      	beq.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b11      	cmp	r3, #17
 800153a:	d122      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_ADC_ConfigChannel+0x258>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d111      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_ADC_ConfigChannel+0x260>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9a      	lsrs	r2, r3, #18
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001574:	e002      	b.n	800157c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40012300 	.word	0x40012300
 800159c:	40012000 	.word	0x40012000
 80015a0:	10000012 	.word	0x10000012
 80015a4:	2000001c 	.word	0x2000001c
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <ADC_Init+0x1f0>)
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <ADC_Init+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00f      	b.n	80016aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0202 	bic.w	r2, r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	035a      	lsls	r2, r3, #13
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e007      	b.n	8001720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	3b01      	subs	r3, #1
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001762:	025a      	lsls	r2, r3, #9
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	029a      	lsls	r2, r3, #10
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d13c      	bne.n	8001838 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d12b      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d127      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d119      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0220 	bic.w	r2, r2, #32
 800180a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fd6b 	bl	800130c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001836:	e00e      	b.n	8001856 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff fd75 	bl	8001334 <HAL_ADC_ErrorCallback>
}
 800184a:	e004      	b.n	8001856 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff fd57 	bl	8001320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0204 	orr.w	r2, r3, #4
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fd4a 	bl	8001334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff3e 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff31 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fab4 	bl	8001044 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e099      	b.n	8001c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b08:	e00f      	b.n	8001b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0a:	f7ff fa9b 	bl	8001044 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d908      	bls.n	8001b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e078      	b.n	8001c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e8      	bne.n	8001b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_DMA_Init+0x158>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
 8001baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d117      	bne.n	8001bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fa77 	bl	80020c4 <DMA_CheckFifoParam>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bea:	2301      	movs	r3, #1
 8001bec:	e016      	b.n	8001c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fa2e 	bl	8002058 <DMA_CalcBaseAndBitshift>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f010803f 	.word	0xf010803f

08001c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_DMA_Start_IT+0x26>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e048      	b.n	8001ce0 <HAL_DMA_Start_IT+0xb8>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d137      	bne.n	8001cd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f9c0 	bl	8001ffc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0216 	orr.w	r2, r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0208 	orr.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e005      	b.n	8001cde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf4:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_DMA_IRQHandler+0x258>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a92      	ldr	r2, [pc, #584]	; (8001f44 <HAL_DMA_IRQHandler+0x25c>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2208      	movs	r2, #8
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2208      	movs	r2, #8
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2201      	movs	r2, #1
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f043 0202 	orr.w	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2204      	movs	r2, #4
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	2204      	movs	r2, #4
 8001dae:	409a      	lsls	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f043 0204 	orr.w	r2, r3, #4
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d043      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03c      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2210      	movs	r2, #16
 8001de4:	409a      	lsls	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d024      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
 8001e16:	e01f      	b.n	8001e58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
 8001e28:	e016      	b.n	8001e58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0208 	bic.w	r2, r2, #8
 8001e46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 808e 	beq.w	8001f86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8086 	beq.w	8001f86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2220      	movs	r2, #32
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d136      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0216 	bic.w	r2, r2, #22
 8001ea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_DMA_IRQHandler+0x1da>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0208 	bic.w	r2, r2, #8
 8001ed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d07d      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
        }
        return;
 8001efe:	e078      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01c      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d030      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
 8001f2c:	e02b      	b.n	8001f86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d027      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e022      	b.n	8001f86 <HAL_DMA_IRQHandler+0x29e>
 8001f40:	2000001c 	.word	0x2000001c
 8001f44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0210 	bic.w	r2, r2, #16
 8001f64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d032      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d022      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d307      	bcc.n	8001fce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f2      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x2ca>
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ff2:	bf00      	nop
    }
  }
}
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop

08001ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002018:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b40      	cmp	r3, #64	; 0x40
 8002028:	d108      	bne.n	800203c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800203a:	e007      	b.n	800204c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3b10      	subs	r3, #16
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <DMA_CalcBaseAndBitshift+0x64>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d909      	bls.n	800209a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	1d1a      	adds	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	659a      	str	r2, [r3, #88]	; 0x58
 8002098:	e007      	b.n	80020aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	aaaaaaab 	.word	0xaaaaaaab
 80020c0:	080076fc 	.word	0x080076fc

080020c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11f      	bne.n	800211e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d855      	bhi.n	8002190 <DMA_CheckFifoParam+0xcc>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <DMA_CheckFifoParam+0x28>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	0800210f 	.word	0x0800210f
 80020f4:	080020fd 	.word	0x080020fd
 80020f8:	08002191 	.word	0x08002191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d045      	beq.n	8002194 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e042      	b.n	8002194 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002116:	d13f      	bne.n	8002198 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211c:	e03c      	b.n	8002198 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002126:	d121      	bne.n	800216c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d836      	bhi.n	800219c <DMA_CheckFifoParam+0xd8>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <DMA_CheckFifoParam+0x70>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002145 	.word	0x08002145
 8002138:	0800214b 	.word	0x0800214b
 800213c:	08002145 	.word	0x08002145
 8002140:	0800215d 	.word	0x0800215d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e02f      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d024      	beq.n	80021a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215a:	e021      	b.n	80021a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002164:	d11e      	bne.n	80021a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216a:	e01b      	b.n	80021a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d902      	bls.n	8002178 <DMA_CheckFifoParam+0xb4>
 8002172:	2b03      	cmp	r3, #3
 8002174:	d003      	beq.n	800217e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002176:	e018      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e015      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      break;
 800218e:	e00b      	b.n	80021a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002190:	bf00      	nop
 8002192:	e00a      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 8002194:	bf00      	nop
 8002196:	e008      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 8002198:	bf00      	nop
 800219a:	e006      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 800219c:	bf00      	nop
 800219e:	e004      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 80021a0:	bf00      	nop
 80021a2:	e002      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;   
 80021a4:	bf00      	nop
 80021a6:	e000      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 80021a8:	bf00      	nop
    }
  } 
  
  return status; 
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e165      	b.n	80024a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8154 	bne.w	800249a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x4a>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d123      	bne.n	800224a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	69b9      	ldr	r1, [r7, #24]
 8002246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d00b      	beq.n	800229e <HAL_GPIO_Init+0xe6>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002292:	2b11      	cmp	r3, #17
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b12      	cmp	r3, #18
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80ae 	beq.w	800249a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_GPIO_Init+0x2fc>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a5b      	ldr	r2, [pc, #364]	; (80024b4 <HAL_GPIO_Init+0x2fc>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_GPIO_Init+0x2fc>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235a:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <HAL_GPIO_Init+0x300>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d025      	beq.n	80023d2 <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x308>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_GPIO_Init+0x310>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x314>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x20a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a49      	ldr	r2, [pc, #292]	; (80024d0 <HAL_GPIO_Init+0x318>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x206>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <HAL_GPIO_Init+0x31c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x202>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e00c      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023ba:	2307      	movs	r3, #7
 80023bc:	e00a      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023be:	2305      	movs	r3, #5
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x21c>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e4:	4934      	ldr	r1, [pc, #208]	; (80024b8 <HAL_GPIO_Init+0x300>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f2:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_GPIO_Init+0x320>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002416:	4a30      	ldr	r2, [pc, #192]	; (80024d8 <HAL_GPIO_Init+0x320>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_GPIO_Init+0x320>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <HAL_GPIO_Init+0x320>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_GPIO_Init+0x320>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246a:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <HAL_GPIO_Init+0x320>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_GPIO_Init+0x320>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002494:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_GPIO_Init+0x320>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f ae96 	bls.w	80021d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	3724      	adds	r7, #36	; 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40021400 	.word	0x40021400
 80024d4:	40021800 	.word	0x40021800
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e001      	b.n	80024fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e10f      	b.n	8002772 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f003 fa40 	bl	80059ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f000 fcfe 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_I2C_Init+0x23c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x64>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_I2C_Init+0x240>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x72>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_I2C_Init+0x244>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0db      	b.n	8002772 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_I2C_Init+0x248>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a64      	ldr	r2, [pc, #400]	; (800277c <HAL_I2C_Init+0x23c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xb4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xc8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_I2C_Init+0x24c>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4956      	ldr	r1, [pc, #344]	; (800277c <HAL_I2C_Init+0x23c>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d80d      	bhi.n	8002644 <HAL_I2C_Init+0x104>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	bf38      	it	cc
 8002640:	2304      	movcc	r3, #4
 8002642:	e04f      	b.n	80026e4 <HAL_I2C_Init+0x1a4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <HAL_I2C_Init+0x130>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e012      	b.n	8002696 <HAL_I2C_Init+0x156>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	fbb0 f3f3 	udiv	r3, r0, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Init+0x15e>
 800269a:	2301      	movs	r3, #1
 800269c:	e022      	b.n	80026e4 <HAL_I2C_Init+0x1a4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_Init+0x184>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e58      	subs	r0, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	e00f      	b.n	80026e4 <HAL_I2C_Init+0x1a4>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6911      	ldr	r1, [r2, #16]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	000186a0 	.word	0x000186a0
 8002780:	001e847f 	.word	0x001e847f
 8002784:	003d08ff 	.word	0x003d08ff
 8002788:	431bde83 	.word	0x431bde83
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	460b      	mov	r3, r1
 80027a4:	813b      	strh	r3, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027aa:	f7fe fc4b 	bl	8001044 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	f040 80d9 	bne.w	8002970 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2319      	movs	r3, #25
 80027c4:	2201      	movs	r2, #1
 80027c6:	496d      	ldr	r1, [pc, #436]	; (800297c <HAL_I2C_Mem_Write+0x1ec>)
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f965 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0cc      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Mem_Write+0x56>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0c5      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d007      	beq.n	800280c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2221      	movs	r2, #33	; 0x21
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_I2C_Mem_Write+0x1f0>)
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800284e:	88f8      	ldrh	r0, [r7, #6]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	8979      	ldrh	r1, [r7, #10]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	4603      	mov	r3, r0
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f890 	bl	8002984 <I2C_RequestMemoryWrite>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d052      	beq.n	8002910 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e081      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f9e6 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b04      	cmp	r3, #4
 8002884:	d107      	bne.n	8002896 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e06b      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d11b      	bne.n	8002910 <HAL_I2C_Mem_Write+0x180>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d017      	beq.n	8002910 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1aa      	bne.n	800286e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f9d2 	bl	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	2b04      	cmp	r3, #4
 800292e:	d107      	bne.n	8002940 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e016      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	00100002 	.word	0x00100002
 8002980:	ffff0000 	.word	0xffff0000

08002984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f86c 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e05f      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	492d      	ldr	r1, [pc, #180]	; (8002a94 <I2C_RequestMemoryWrite+0x110>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f8b0 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04c      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f91a 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e02b      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e021      	b.n	8002a88 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f8f4 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e005      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	00010002 	.word	0x00010002

08002a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa8:	e025      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d021      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe fac7 	bl	8001044 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e023      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	e00c      	b.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d0b6      	beq.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b54:	e051      	b.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d123      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e046      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fa45 	bl	8001044 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e020      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10c      	bne.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e00b      	b.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d18d      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e02d      	b.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f878 	bl	8002d48 <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e02d      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d021      	beq.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe f9eb 	bl	8001044 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e007      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d1ca      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd2:	e02d      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f837 	bl	8002d48 <I2C_IsAcknowledgeFailed>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e02d      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d021      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7fe f9aa 	bl	8001044 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d1ca      	bne.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d11b      	bne.n	8002d98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0204 	orr.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0ca      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b6      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a57      	ldr	r2, [pc, #348]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494c      	ldr	r1, [pc, #304]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07d      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06d      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e065      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4933      	ldr	r1, [pc, #204]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fe f8d4 	bl	8001044 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe f8d0 	bl	8001044 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04d      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e030      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4915      	ldr	r1, [pc, #84]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490d      	ldr	r1, [pc, #52]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f851 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	fa21 f303 	lsr.w	r3, r1, r3
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe f836 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023c00 	.word	0x40023c00
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08007e70 	.word	0x08007e70
 8002f68:	2000001c 	.word	0x2000001c

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000001c 	.word	0x2000001c

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0a9b      	lsrs	r3, r3, #10
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08007e80 	.word	0x08007e80

08002fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb0:	f7ff ffdc 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb4:	4601      	mov	r1, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0b5b      	lsrs	r3, r3, #13
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	08007e80 	.word	0x08007e80

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fee:	4bc6      	ldr	r3, [pc, #792]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	f200 817e 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x324>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	080032f9 	.word	0x080032f9
 800300c:	080032f9 	.word	0x080032f9
 8003010:	080032f9 	.word	0x080032f9
 8003014:	0800303f 	.word	0x0800303f
 8003018:	080032f9 	.word	0x080032f9
 800301c:	080032f9 	.word	0x080032f9
 8003020:	080032f9 	.word	0x080032f9
 8003024:	08003045 	.word	0x08003045
 8003028:	080032f9 	.word	0x080032f9
 800302c:	080032f9 	.word	0x080032f9
 8003030:	080032f9 	.word	0x080032f9
 8003034:	080031a1 	.word	0x080031a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4bb4      	ldr	r3, [pc, #720]	; (800330c <HAL_RCC_GetSysClockFreq+0x338>)
 800303a:	613b      	str	r3, [r7, #16]
       break;
 800303c:	e15f      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303e:	4bb4      	ldr	r3, [pc, #720]	; (8003310 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003040:	613b      	str	r3, [r7, #16]
      break;
 8003042:	e15c      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003044:	4bb0      	ldr	r3, [pc, #704]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304e:	4bae      	ldr	r3, [pc, #696]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d04a      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305a:	4bab      	ldr	r3, [pc, #684]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	f04f 0400 	mov.w	r4, #0
 8003064:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	ea03 0501 	and.w	r5, r3, r1
 8003070:	ea04 0602 	and.w	r6, r4, r2
 8003074:	4629      	mov	r1, r5
 8003076:	4632      	mov	r2, r6
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	f04f 0400 	mov.w	r4, #0
 8003080:	0154      	lsls	r4, r2, #5
 8003082:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003086:	014b      	lsls	r3, r1, #5
 8003088:	4619      	mov	r1, r3
 800308a:	4622      	mov	r2, r4
 800308c:	1b49      	subs	r1, r1, r5
 800308e:	eb62 0206 	sbc.w	r2, r2, r6
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f04f 0400 	mov.w	r4, #0
 800309a:	0194      	lsls	r4, r2, #6
 800309c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030a0:	018b      	lsls	r3, r1, #6
 80030a2:	1a5b      	subs	r3, r3, r1
 80030a4:	eb64 0402 	sbc.w	r4, r4, r2
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	00e2      	lsls	r2, r4, #3
 80030b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030b6:	00d9      	lsls	r1, r3, #3
 80030b8:	460b      	mov	r3, r1
 80030ba:	4614      	mov	r4, r2
 80030bc:	195b      	adds	r3, r3, r5
 80030be:	eb44 0406 	adc.w	r4, r4, r6
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	0262      	lsls	r2, r4, #9
 80030cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030d0:	0259      	lsls	r1, r3, #9
 80030d2:	460b      	mov	r3, r1
 80030d4:	4614      	mov	r4, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	4621      	mov	r1, r4
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	461a      	mov	r2, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	f7fd fdc8 	bl	8000c78 <__aeabi_uldivmod>
 80030e8:	4603      	mov	r3, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e049      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f0:	4b85      	ldr	r3, [pc, #532]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	f04f 0400 	mov.w	r4, #0
 80030fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea03 0501 	and.w	r5, r3, r1
 8003106:	ea04 0602 	and.w	r6, r4, r2
 800310a:	4629      	mov	r1, r5
 800310c:	4632      	mov	r2, r6
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f04f 0400 	mov.w	r4, #0
 8003116:	0154      	lsls	r4, r2, #5
 8003118:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800311c:	014b      	lsls	r3, r1, #5
 800311e:	4619      	mov	r1, r3
 8003120:	4622      	mov	r2, r4
 8003122:	1b49      	subs	r1, r1, r5
 8003124:	eb62 0206 	sbc.w	r2, r2, r6
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	f04f 0400 	mov.w	r4, #0
 8003130:	0194      	lsls	r4, r2, #6
 8003132:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003136:	018b      	lsls	r3, r1, #6
 8003138:	1a5b      	subs	r3, r3, r1
 800313a:	eb64 0402 	sbc.w	r4, r4, r2
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	00e2      	lsls	r2, r4, #3
 8003148:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800314c:	00d9      	lsls	r1, r3, #3
 800314e:	460b      	mov	r3, r1
 8003150:	4614      	mov	r4, r2
 8003152:	195b      	adds	r3, r3, r5
 8003154:	eb44 0406 	adc.w	r4, r4, r6
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	02a2      	lsls	r2, r4, #10
 8003162:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003166:	0299      	lsls	r1, r3, #10
 8003168:	460b      	mov	r3, r1
 800316a:	4614      	mov	r4, r2
 800316c:	4618      	mov	r0, r3
 800316e:	4621      	mov	r1, r4
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f04f 0400 	mov.w	r4, #0
 8003176:	461a      	mov	r2, r3
 8003178:	4623      	mov	r3, r4
 800317a:	f7fd fd7d 	bl	8000c78 <__aeabi_uldivmod>
 800317e:	4603      	mov	r3, r0
 8003180:	460c      	mov	r4, r1
 8003182:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003184:	4b60      	ldr	r3, [pc, #384]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	613b      	str	r3, [r7, #16]
      break;
 800319e:	e0ae      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a0:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031aa:	4b57      	ldr	r3, [pc, #348]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04a      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b6:	4b54      	ldr	r3, [pc, #336]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	ea03 0501 	and.w	r5, r3, r1
 80031cc:	ea04 0602 	and.w	r6, r4, r2
 80031d0:	4629      	mov	r1, r5
 80031d2:	4632      	mov	r2, r6
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f04f 0400 	mov.w	r4, #0
 80031dc:	0154      	lsls	r4, r2, #5
 80031de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e2:	014b      	lsls	r3, r1, #5
 80031e4:	4619      	mov	r1, r3
 80031e6:	4622      	mov	r2, r4
 80031e8:	1b49      	subs	r1, r1, r5
 80031ea:	eb62 0206 	sbc.w	r2, r2, r6
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f04f 0400 	mov.w	r4, #0
 80031f6:	0194      	lsls	r4, r2, #6
 80031f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031fc:	018b      	lsls	r3, r1, #6
 80031fe:	1a5b      	subs	r3, r3, r1
 8003200:	eb64 0402 	sbc.w	r4, r4, r2
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	00e2      	lsls	r2, r4, #3
 800320e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003212:	00d9      	lsls	r1, r3, #3
 8003214:	460b      	mov	r3, r1
 8003216:	4614      	mov	r4, r2
 8003218:	195b      	adds	r3, r3, r5
 800321a:	eb44 0406 	adc.w	r4, r4, r6
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	0262      	lsls	r2, r4, #9
 8003228:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800322c:	0259      	lsls	r1, r3, #9
 800322e:	460b      	mov	r3, r1
 8003230:	4614      	mov	r4, r2
 8003232:	4618      	mov	r0, r3
 8003234:	4621      	mov	r1, r4
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f04f 0400 	mov.w	r4, #0
 800323c:	461a      	mov	r2, r3
 800323e:	4623      	mov	r3, r4
 8003240:	f7fd fd1a 	bl	8000c78 <__aeabi_uldivmod>
 8003244:	4603      	mov	r3, r0
 8003246:	460c      	mov	r4, r1
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e049      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324c:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	f04f 0400 	mov.w	r4, #0
 8003256:	f240 11ff 	movw	r1, #511	; 0x1ff
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	ea03 0501 	and.w	r5, r3, r1
 8003262:	ea04 0602 	and.w	r6, r4, r2
 8003266:	4629      	mov	r1, r5
 8003268:	4632      	mov	r2, r6
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	f04f 0400 	mov.w	r4, #0
 8003272:	0154      	lsls	r4, r2, #5
 8003274:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003278:	014b      	lsls	r3, r1, #5
 800327a:	4619      	mov	r1, r3
 800327c:	4622      	mov	r2, r4
 800327e:	1b49      	subs	r1, r1, r5
 8003280:	eb62 0206 	sbc.w	r2, r2, r6
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	f04f 0400 	mov.w	r4, #0
 800328c:	0194      	lsls	r4, r2, #6
 800328e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003292:	018b      	lsls	r3, r1, #6
 8003294:	1a5b      	subs	r3, r3, r1
 8003296:	eb64 0402 	sbc.w	r4, r4, r2
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032a8:	00d9      	lsls	r1, r3, #3
 80032aa:	460b      	mov	r3, r1
 80032ac:	4614      	mov	r4, r2
 80032ae:	195b      	adds	r3, r3, r5
 80032b0:	eb44 0406 	adc.w	r4, r4, r6
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	02a2      	lsls	r2, r4, #10
 80032be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032c2:	0299      	lsls	r1, r3, #10
 80032c4:	460b      	mov	r3, r1
 80032c6:	4614      	mov	r4, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	4621      	mov	r1, r4
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f04f 0400 	mov.w	r4, #0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4623      	mov	r3, r4
 80032d6:	f7fd fccf 	bl	8000c78 <__aeabi_uldivmod>
 80032da:	4603      	mov	r3, r0
 80032dc:	460c      	mov	r4, r1
 80032de:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_GetSysClockFreq+0x334>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	0f1b      	lsrs	r3, r3, #28
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	613b      	str	r3, [r7, #16]
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCC_GetSysClockFreq+0x338>)
 80032fa:	613b      	str	r3, [r7, #16]
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	693b      	ldr	r3, [r7, #16]
}
 8003300:	4618      	mov	r0, r3
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	00f42400 	.word	0x00f42400
 8003310:	007a1200 	.word	0x007a1200

08003314 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8083 	beq.w	8003434 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800332e:	4b95      	ldr	r3, [pc, #596]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d019      	beq.n	800336e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800333a:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003342:	2b08      	cmp	r3, #8
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003346:	4b8f      	ldr	r3, [pc, #572]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003352:	d00c      	beq.n	800336e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003354:	4b8b      	ldr	r3, [pc, #556]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d112      	bne.n	8003386 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003360:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336c:	d10b      	bne.n	8003386 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d05b      	beq.n	8003432 <HAL_RCC_OscConfig+0x11e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d157      	bne.n	8003432 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e216      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x8a>
 8003390:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7b      	ldr	r2, [pc, #492]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e01d      	b.n	80033da <HAL_RCC_OscConfig+0xc6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0xae>
 80033a8:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a75      	ldr	r2, [pc, #468]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b73      	ldr	r3, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a72      	ldr	r2, [pc, #456]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0xc6>
 80033c2:	4b70      	ldr	r3, [pc, #448]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6f      	ldr	r2, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6c      	ldr	r2, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d013      	beq.n	800340a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd fe2f 	bl	8001044 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ea:	f7fd fe2b 	bl	8001044 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1db      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0xd6>
 8003408:	e014      	b.n	8003434 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fd fe1b 	bl	8001044 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003412:	f7fd fe17 	bl	8001044 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1c7      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0xfe>
 8003430:	e000      	b.n	8003434 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003432:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d06f      	beq.n	8003520 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003440:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003454:	2b08      	cmp	r3, #8
 8003456:	d105      	bne.n	8003464 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003458:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003464:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d11c      	bne.n	80034aa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003470:	4b44      	ldr	r3, [pc, #272]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347c:	4b41      	ldr	r3, [pc, #260]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x180>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e18f      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4938      	ldr	r1, [pc, #224]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a8:	e03a      	b.n	8003520 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b2:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x274>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd fdc4 	bl	8001044 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fd fdc0 	bl	8001044 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e170      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4925      	ldr	r1, [pc, #148]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
 80034f2:	e015      	b.n	8003520 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_OscConfig+0x274>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd fda3 	bl	8001044 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003502:	f7fd fd9f 	bl	8001044 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e14f      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d037      	beq.n	800359c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d016      	beq.n	8003562 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003534:	4b15      	ldr	r3, [pc, #84]	; (800358c <HAL_RCC_OscConfig+0x278>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fd fd83 	bl	8001044 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003542:	f7fd fd7f 	bl	8001044 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e12f      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x270>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x22e>
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_OscConfig+0x278>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd fd6c 	bl	8001044 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356e:	e00f      	b.n	8003590 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd fd68 	bl	8001044 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d908      	bls.n	8003590 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e118      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	42470000 	.word	0x42470000
 800358c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b8a      	ldr	r3, [pc, #552]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e9      	bne.n	8003570 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8097 	beq.w	80036d8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b83      	ldr	r3, [pc, #524]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a7e      	ldr	r2, [pc, #504]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b7c      	ldr	r3, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b79      	ldr	r3, [pc, #484]	; (80037c0 <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd fd27 	bl	8001044 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd fd23 	bl	8001044 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0d3      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x31a>
 8003620:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a65      	ldr	r2, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	e01c      	b.n	8003668 <HAL_RCC_OscConfig+0x354>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b05      	cmp	r3, #5
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x33c>
 8003636:	4b61      	ldr	r3, [pc, #388]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a60      	ldr	r2, [pc, #384]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	4b5e      	ldr	r3, [pc, #376]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0x354>
 8003650:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a59      	ldr	r2, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	4b57      	ldr	r3, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a56      	ldr	r2, [pc, #344]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003662:	f023 0304 	bic.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fd fce8 	bl	8001044 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fd fce4 	bl	8001044 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e092      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ee      	beq.n	8003678 <HAL_RCC_OscConfig+0x364>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fcd2 	bl	8001044 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fcce 	bl	8001044 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e07c      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	4b40      	ldr	r3, [pc, #256]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ee      	bne.n	80036a4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	4a3a      	ldr	r2, [pc, #232]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d068      	beq.n	80037b2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d060      	beq.n	80037ae <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d145      	bne.n	8003780 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_RCC_OscConfig+0x4b0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fca3 	bl	8001044 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003702:	f7fd fc9f 	bl	8001044 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e04f      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003714:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	019b      	lsls	r3, r3, #6
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	3b01      	subs	r3, #1
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	061b      	lsls	r3, r3, #24
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	071b      	lsls	r3, r3, #28
 800374c:	491b      	ldr	r1, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RCC_OscConfig+0x4b0>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd fc74 	bl	8001044 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd fc70 	bl	8001044 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e020      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x44c>
 800377e:	e018      	b.n	80037b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCC_OscConfig+0x4b0>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fc5d 	bl	8001044 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fd fc59 	bl	8001044 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e009      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_OscConfig+0x4a8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x47a>
 80037ac:	e001      	b.n	80037b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000
 80037c4:	42470060 	.word	0x42470060

080037c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e01d      	b.n	8003816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f002 f944 	bl	8005a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f000 fa40 	bl	8003c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b06      	cmp	r3, #6
 8003846:	d007      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	f241 1311 	movw	r3, #4369	; 0x1111
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <HAL_TIM_Base_Stop_IT+0x48>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	f240 4344 	movw	r3, #1092	; 0x444
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d107      	bne.n	80038ae <HAL_TIM_Base_Stop_IT+0x48>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d122      	bne.n	8003918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d11b      	bne.n	8003918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0202 	mvn.w	r2, #2
 80038e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9a5 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f997 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f9a8 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b04      	cmp	r3, #4
 8003924:	d122      	bne.n	800396c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b04      	cmp	r3, #4
 8003932:	d11b      	bne.n	800396c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0204 	mvn.w	r2, #4
 800393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f97b 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f96d 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f97e 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d122      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d11b      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0208 	mvn.w	r2, #8
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2204      	movs	r2, #4
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f951 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f943 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f954 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d122      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d11b      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0210 	mvn.w	r2, #16
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2208      	movs	r2, #8
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f927 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f919 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f92a 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d10e      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0201 	mvn.w	r2, #1
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f001 f8d4 	bl	8004be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b80      	cmp	r3, #128	; 0x80
 8003a4c:	d10e      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d107      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa99 	bl	8003f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8ef 	bl	8003c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0220 	mvn.w	r2, #32
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa63 	bl	8003f8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIM_ConfigClockSource+0x18>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0a6      	b.n	8003c32 <HAL_TIM_ConfigClockSource+0x166>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d067      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0x120>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d80b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x6c>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d073      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d802      	bhi.n	8003b2e <HAL_TIM_ConfigClockSource+0x62>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d06f      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b2c:	e078      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d06c      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d06a      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b36:	e073      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b38:	2b70      	cmp	r3, #112	; 0x70
 8003b3a:	d00d      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x8c>
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d804      	bhi.n	8003b4a <HAL_TIM_ConfigClockSource+0x7e>
 8003b40:	2b50      	cmp	r3, #80	; 0x50
 8003b42:	d033      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0xe0>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d041      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b48:	e06a      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	d066      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x152>
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d017      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b56:	e063      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f000 f9aa 	bl	8003ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
      break;
 8003b84:	e04c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f000 f993 	bl	8003ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba8:	609a      	str	r2, [r3, #8]
      break;
 8003baa:	e039      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f000 f907 	bl	8003dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2150      	movs	r1, #80	; 0x50
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f960 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003bca:	e029      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f000 f926 	bl	8003e2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2160      	movs	r1, #96	; 0x60
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f950 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003bea:	e019      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 f8e7 	bl	8003dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f940 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e009      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 f937 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e000      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d00f      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3d      	ldr	r2, [pc, #244]	; (8003da4 <TIM_Base_SetConfig+0x118>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <TIM_Base_SetConfig+0x11c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <TIM_Base_SetConfig+0x120>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d02b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d027      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <TIM_Base_SetConfig+0x118>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d023      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <TIM_Base_SetConfig+0x11c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <TIM_Base_SetConfig+0x120>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d017      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <TIM_Base_SetConfig+0x128>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <TIM_Base_SetConfig+0x12c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <TIM_Base_SetConfig+0x130>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <TIM_Base_SetConfig+0x134>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <TIM_Base_SetConfig+0x138>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <TIM_Base_SetConfig+0x13c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0xf8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d103      	bne.n	8003d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	615a      	str	r2, [r3, #20]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40010400 	.word	0x40010400
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800
 8003dc0:	40001800 	.word	0x40001800
 8003dc4:	40001c00 	.word	0x40001c00
 8003dc8:	40002000 	.word	0x40002000

08003dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 030a 	bic.w	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f043 0307 	orr.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e032      	b.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e03f      	b.n	8004044 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f001 fd75 	bl	8005ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2224      	movs	r2, #36	; 0x24
 8003fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f90c 	bl	8004214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800400a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800401a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800402a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	f040 8083 	bne.w	8004174 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Transmit+0x2e>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07b      	b.n	8004176 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_UART_Transmit+0x40>
 8004088:	2302      	movs	r3, #2
 800408a:	e074      	b.n	8004176 <HAL_UART_Transmit+0x12a>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	; 0x21
 800409e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80040a2:	f7fc ffcf 	bl	8001044 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040b4:	e042      	b.n	800413c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040cc:	d122      	bne.n	8004114 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2180      	movs	r1, #128	; 0x80
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f850 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e046      	b.n	8004176 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fa:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3302      	adds	r3, #2
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	e017      	b.n	800413c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	e013      	b.n	800413c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	2180      	movs	r1, #128	; 0x80
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f82d 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e023      	b.n	8004176 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	60ba      	str	r2, [r7, #8]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1b7      	bne.n	80040b6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f814 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e00a      	b.n	8004176 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418e:	e02c      	b.n	80041ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d028      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0x30>
 800419e:	f7fc ff51 	bl	8001044 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d21d      	bcs.n	80041ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d0c3      	beq.n	8004190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	b5b0      	push	{r4, r5, r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004254:	f023 030c 	bic.w	r3, r3, #12
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	430b      	orrs	r3, r1
 8004260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	f040 80e4 	bne.w	800444c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4aab      	ldr	r2, [pc, #684]	; (8004538 <UART_SetConfig+0x324>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <UART_SetConfig+0x84>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4aaa      	ldr	r2, [pc, #680]	; (800453c <UART_SetConfig+0x328>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d16c      	bne.n	8004372 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004298:	f7fe fe88 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 800429c:	4602      	mov	r2, r0
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009a      	lsls	r2, r3, #2
 80042a6:	441a      	add	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	4aa3      	ldr	r2, [pc, #652]	; (8004540 <UART_SetConfig+0x32c>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	011c      	lsls	r4, r3, #4
 80042bc:	f7fe fe76 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009a      	lsls	r2, r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80042d6:	f7fe fe69 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	4a93      	ldr	r2, [pc, #588]	; (8004540 <UART_SetConfig+0x32c>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2264      	movs	r2, #100	; 0x64
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	1aeb      	subs	r3, r5, r3
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	3332      	adds	r3, #50	; 0x32
 8004304:	4a8e      	ldr	r2, [pc, #568]	; (8004540 <UART_SetConfig+0x32c>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004312:	441c      	add	r4, r3
 8004314:	f7fe fe4a 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004318:	4602      	mov	r2, r0
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fbb2 f5f3 	udiv	r5, r2, r3
 800432e:	f7fe fe3d 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004332:	4602      	mov	r2, r0
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009a      	lsls	r2, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	4a7d      	ldr	r2, [pc, #500]	; (8004540 <UART_SetConfig+0x32c>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	2264      	movs	r2, #100	; 0x64
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	1aeb      	subs	r3, r5, r3
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	3332      	adds	r3, #50	; 0x32
 800435c:	4a78      	ldr	r2, [pc, #480]	; (8004540 <UART_SetConfig+0x32c>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	f003 0207 	and.w	r2, r3, #7
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4422      	add	r2, r4
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	e154      	b.n	800461c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004372:	f7fe fe07 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004376:	4602      	mov	r2, r0
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009a      	lsls	r2, r3, #2
 8004380:	441a      	add	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	4a6c      	ldr	r2, [pc, #432]	; (8004540 <UART_SetConfig+0x32c>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f7fe fdf5 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 800439a:	4602      	mov	r2, r0
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80043b0:	f7fe fde8 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009a      	lsls	r2, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <UART_SetConfig+0x32c>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	2264      	movs	r2, #100	; 0x64
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	1aeb      	subs	r3, r5, r3
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	3332      	adds	r3, #50	; 0x32
 80043de:	4a58      	ldr	r2, [pc, #352]	; (8004540 <UART_SetConfig+0x32c>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043ec:	441c      	add	r4, r3
 80043ee:	f7fe fdc9 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009a      	lsls	r2, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fbb2 f5f3 	udiv	r5, r2, r3
 8004408:	f7fe fdbc 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 800440c:	4602      	mov	r2, r0
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009a      	lsls	r2, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	4a47      	ldr	r2, [pc, #284]	; (8004540 <UART_SetConfig+0x32c>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	2264      	movs	r2, #100	; 0x64
 800442c:	fb02 f303 	mul.w	r3, r2, r3
 8004430:	1aeb      	subs	r3, r5, r3
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	3332      	adds	r3, #50	; 0x32
 8004436:	4a42      	ldr	r2, [pc, #264]	; (8004540 <UART_SetConfig+0x32c>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f003 0207 	and.w	r2, r3, #7
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4422      	add	r2, r4
 8004448:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800444a:	e0e7      	b.n	800461c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a39      	ldr	r2, [pc, #228]	; (8004538 <UART_SetConfig+0x324>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <UART_SetConfig+0x24c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a38      	ldr	r2, [pc, #224]	; (800453c <UART_SetConfig+0x328>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d171      	bne.n	8004544 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004460:	f7fe fda4 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004464:	4602      	mov	r2, r0
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	441a      	add	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	4a31      	ldr	r2, [pc, #196]	; (8004540 <UART_SetConfig+0x32c>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	011c      	lsls	r4, r3, #4
 8004484:	f7fe fd92 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 8004488:	4602      	mov	r2, r0
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	fbb2 f5f3 	udiv	r5, r2, r3
 800449e:	f7fe fd85 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009a      	lsls	r2, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <UART_SetConfig+0x32c>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	; 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1aeb      	subs	r3, r5, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	; 0x32
 80044cc:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <UART_SetConfig+0x32c>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d8:	441c      	add	r4, r3
 80044da:	f7fe fd67 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 80044de:	4602      	mov	r2, r0
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009a      	lsls	r2, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80044f4:	f7fe fd5a 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009a      	lsls	r2, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <UART_SetConfig+0x32c>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	2264      	movs	r2, #100	; 0x64
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	1aeb      	subs	r3, r5, r3
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	3332      	adds	r3, #50	; 0x32
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <UART_SetConfig+0x32c>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4422      	add	r2, r4
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	e071      	b.n	800461c <UART_SetConfig+0x408>
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004544:	f7fe fd1e 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004548:	4602      	mov	r2, r0
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009a      	lsls	r2, r3, #2
 8004552:	441a      	add	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4a31      	ldr	r2, [pc, #196]	; (8004624 <UART_SetConfig+0x410>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	011c      	lsls	r4, r3, #4
 8004568:	f7fe fd0c 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 800456c:	4602      	mov	r2, r0
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004582:	f7fe fcff 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004586:	4602      	mov	r2, r0
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	4a21      	ldr	r2, [pc, #132]	; (8004624 <UART_SetConfig+0x410>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2264      	movs	r2, #100	; 0x64
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	1aeb      	subs	r3, r5, r3
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	3332      	adds	r3, #50	; 0x32
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <UART_SetConfig+0x410>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045bc:	441c      	add	r4, r3
 80045be:	f7fe fce1 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009a      	lsls	r2, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80045d8:	f7fe fcd4 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009a      	lsls	r2, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <UART_SetConfig+0x410>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2264      	movs	r2, #100	; 0x64
 80045fc:	fb02 f303 	mul.w	r3, r2, r3
 8004600:	1aeb      	subs	r3, r5, r3
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	4a07      	ldr	r2, [pc, #28]	; (8004624 <UART_SetConfig+0x410>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4422      	add	r2, r4
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	e7ff      	b.n	800461c <UART_SetConfig+0x408>
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004628:	b5b0      	push	{r4, r5, r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  char buf[32] = {};
 800462e:	463b      	mov	r3, r7
 8004630:	2220      	movs	r2, #32
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fb87 	bl	8005d48 <memset>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800463a:	f7fc fc9d 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800463e:	f000 f8b7 	bl	80047b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004642:	f000 fa45 	bl	8004ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004646:	f000 fa23 	bl	8004a90 <MX_DMA_Init>
  MX_ADC1_Init();
 800464a:	f000 f91f 	bl	800488c <MX_ADC1_Init>
  MX_I2C1_Init();
 800464e:	f000 f97b 	bl	8004948 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004652:	f000 f9a7 	bl	80049a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004656:	f000 f9f1 	bl	8004a3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800465a:	f000 ff4b 	bl	80054f4 <ssd1306_Init>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcValue,2);
 800465e:	2202      	movs	r2, #2
 8004660:	4949      	ldr	r1, [pc, #292]	; (8004788 <main+0x160>)
 8004662:	484a      	ldr	r0, [pc, #296]	; (800478c <main+0x164>)
 8004664:	f7fc fd60 	bl	8001128 <HAL_ADC_Start_DMA>

  STARTUP_LABEL:
  UserSetUp();
 8004668:	f000 fdc8 	bl	80051fc <UserSetUp>

  SetUpNormalizeParameter(NormalizeParameter);
 800466c:	4848      	ldr	r0, [pc, #288]	; (8004790 <main+0x168>)
 800466e:	f000 fbe7 	bl	8004e40 <SetUpNormalizeParameter>
  RESTART_LABEL:

/*------------Draw LCD BEGIN----------*/
  sprintf(buf, "ave=%d sd=%d", (int)(NormalizeParameter[0]),(int)(NormalizeParameter[1]));
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <main+0x168>)
 8004674:	edd3 7a00 	vldr	s15, [r3]
 8004678:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800467c:	4b44      	ldr	r3, [pc, #272]	; (8004790 <main+0x168>)
 800467e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004686:	4638      	mov	r0, r7
 8004688:	ee17 3a90 	vmov	r3, s15
 800468c:	ee17 2a10 	vmov	r2, s14
 8004690:	4940      	ldr	r1, [pc, #256]	; (8004794 <main+0x16c>)
 8004692:	f001 fb61 	bl	8005d58 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), 0xFFF);
 8004696:	4639      	mov	r1, r7
 8004698:	f640 73ff 	movw	r3, #4095	; 0xfff
 800469c:	2220      	movs	r2, #32
 800469e:	483e      	ldr	r0, [pc, #248]	; (8004798 <main+0x170>)
 80046a0:	f7ff fcd4 	bl	800404c <HAL_UART_Transmit>

  ssd1306_Fill(White);
 80046a4:	2001      	movs	r0, #1
 80046a6:	f000 ff91 	bl	80055cc <ssd1306_Fill>

  ssd1306_SetCursor(0,0);
 80046aa:	2100      	movs	r1, #0
 80046ac:	2000      	movs	r0, #0
 80046ae:	f001 f8e5 	bl	800587c <ssd1306_SetCursor>
  ssd1306_WriteString(buf,Font_7x10,Black);
 80046b2:	4a3a      	ldr	r2, [pc, #232]	; (800479c <main+0x174>)
 80046b4:	4638      	mov	r0, r7
 80046b6:	2300      	movs	r3, #0
 80046b8:	ca06      	ldmia	r2, {r1, r2}
 80046ba:	f001 f8b9 	bl	8005830 <ssd1306_WriteString>

  sprintf(buf, "Waiting for start");
 80046be:	463b      	mov	r3, r7
 80046c0:	4a37      	ldr	r2, [pc, #220]	; (80047a0 <main+0x178>)
 80046c2:	461c      	mov	r4, r3
 80046c4:	4615      	mov	r5, r2
 80046c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	8023      	strh	r3, [r4, #0]
  ssd1306_SetCursor(0,12);
 80046ce:	210c      	movs	r1, #12
 80046d0:	2000      	movs	r0, #0
 80046d2:	f001 f8d3 	bl	800587c <ssd1306_SetCursor>
  ssd1306_WriteString(buf,Font_7x10,Black);
 80046d6:	4a31      	ldr	r2, [pc, #196]	; (800479c <main+0x174>)
 80046d8:	4638      	mov	r0, r7
 80046da:	2300      	movs	r3, #0
 80046dc:	ca06      	ldmia	r2, {r1, r2}
 80046de:	f001 f8a7 	bl	8005830 <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 80046e2:	f000 ff95 	bl	8005610 <ssd1306_UpdateScreen>
  /*------------Draw LCD END---------*/

  while(1){
	  if(HAL_GPIO_ReadPin(GPIOB, FOOT_SW_Pin) == 1){
 80046e6:	2108      	movs	r1, #8
 80046e8:	482e      	ldr	r0, [pc, #184]	; (80047a4 <main+0x17c>)
 80046ea:	f7fd fef7 	bl	80024dc <HAL_GPIO_ReadPin>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d1f8      	bne.n	80046e6 <main+0xbe>
		  if(HAL_GPIO_ReadPin(GPIOB, FOOT_SW_Pin) == 0){
 80046f4:	2108      	movs	r1, #8
 80046f6:	482b      	ldr	r0, [pc, #172]	; (80047a4 <main+0x17c>)
 80046f8:	f7fd fef0 	bl	80024dc <HAL_GPIO_ReadPin>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f1      	bne.n	80046e6 <main+0xbe>
			  ssd1306_Fill(White);
 8004702:	2001      	movs	r0, #1
 8004704:	f000 ff62 	bl	80055cc <ssd1306_Fill>
			  sprintf(buf, "RUNNING");
 8004708:	463b      	mov	r3, r7
 800470a:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <main+0x180>)
 800470c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004710:	e883 0003 	stmia.w	r3, {r0, r1}
			  ssd1306_SetCursor(0,0);
 8004714:	2100      	movs	r1, #0
 8004716:	2000      	movs	r0, #0
 8004718:	f001 f8b0 	bl	800587c <ssd1306_SetCursor>
			  ssd1306_WriteString(buf,Font_7x10,Black);
 800471c:	4a1f      	ldr	r2, [pc, #124]	; (800479c <main+0x174>)
 800471e:	4638      	mov	r0, r7
 8004720:	2300      	movs	r3, #0
 8004722:	ca06      	ldmia	r2, {r1, r2}
 8004724:	f001 f884 	bl	8005830 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8004728:	f000 ff72 	bl	8005610 <ssd1306_UpdateScreen>
			  HAL_Delay(300);
 800472c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004730:	f7fc fc94 	bl	800105c <HAL_Delay>
			  break;
 8004734:	bf00      	nop
		  }
	  }
  }


  HAL_TIM_Base_Start_IT(&htim2);
 8004736:	481d      	ldr	r0, [pc, #116]	; (80047ac <main+0x184>)
 8004738:	f7ff f871 	bl	800381e <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOB, FOOT_SW_Pin) == 1){
 800473c:	2108      	movs	r1, #8
 800473e:	4819      	ldr	r0, [pc, #100]	; (80047a4 <main+0x17c>)
 8004740:	f7fd fecc 	bl	80024dc <HAL_GPIO_ReadPin>
 8004744:	4603      	mov	r3, r0
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10e      	bne.n	8004768 <main+0x140>
		  if(HAL_GPIO_ReadPin(GPIOB, FOOT_SW_Pin) == 0){
 800474a:	2108      	movs	r1, #8
 800474c:	4815      	ldr	r0, [pc, #84]	; (80047a4 <main+0x17c>)
 800474e:	f7fd fec5 	bl	80024dc <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f1      	bne.n	800473c <main+0x114>
			  HAL_TIM_Base_Stop_IT(&htim2); //stop timer interrupt
 8004758:	4814      	ldr	r0, [pc, #80]	; (80047ac <main+0x184>)
 800475a:	f7ff f884 	bl	8003866 <HAL_TIM_Base_Stop_IT>
			  HAL_Delay(300);
 800475e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004762:	f7fc fc7b 	bl	800105c <HAL_Delay>
			  goto RESTART_LABEL;
 8004766:	e784      	b.n	8004672 <main+0x4a>
		  }
	  }else if(HAL_GPIO_ReadPin(GPIOB, RIGHT_B_Pin) == 0){
 8004768:	2110      	movs	r1, #16
 800476a:	480e      	ldr	r0, [pc, #56]	; (80047a4 <main+0x17c>)
 800476c:	f7fd feb6 	bl	80024dc <HAL_GPIO_ReadPin>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e2      	bne.n	800473c <main+0x114>
		  HAL_TIM_Base_Stop_IT(&htim2); //stop timer interrupt
 8004776:	480d      	ldr	r0, [pc, #52]	; (80047ac <main+0x184>)
 8004778:	f7ff f875 	bl	8003866 <HAL_TIM_Base_Stop_IT>
		  HAL_Delay(300);
 800477c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004780:	f7fc fc6c 	bl	800105c <HAL_Delay>
		  goto STARTUP_LABEL;
 8004784:	e770      	b.n	8004668 <main+0x40>
 8004786:	bf00      	nop
 8004788:	20000664 	.word	0x20000664
 800478c:	2000053c 	.word	0x2000053c
 8004790:	20000534 	.word	0x20000534
 8004794:	08007630 	.word	0x08007630
 8004798:	20000624 	.word	0x20000624
 800479c:	20000008 	.word	0x20000008
 80047a0:	08007640 	.word	0x08007640
 80047a4:	40020400 	.word	0x40020400
 80047a8:	08007654 	.word	0x08007654
 80047ac:	200005e4 	.word	0x200005e4

080047b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b094      	sub	sp, #80	; 0x50
 80047b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047b6:	f107 031c 	add.w	r3, r7, #28
 80047ba:	2234      	movs	r2, #52	; 0x34
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fac2 	bl	8005d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047c4:	f107 0308 	add.w	r3, r7, #8
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d4:	2300      	movs	r3, #0
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <SystemClock_Config+0xd4>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	4a29      	ldr	r2, [pc, #164]	; (8004884 <SystemClock_Config+0xd4>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6413      	str	r3, [r2, #64]	; 0x40
 80047e4:	4b27      	ldr	r3, [pc, #156]	; (8004884 <SystemClock_Config+0xd4>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80047f0:	2300      	movs	r3, #0
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <SystemClock_Config+0xd8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <SystemClock_Config+0xd8>)
 80047fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <SystemClock_Config+0xd8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004810:	2302      	movs	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004814:	2301      	movs	r3, #1
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004818:	2310      	movs	r3, #16
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800481c:	2302      	movs	r3, #2
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004820:	2300      	movs	r3, #0
 8004822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004824:	2310      	movs	r3, #16
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800482c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800482e:	2304      	movs	r3, #4
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004832:	2302      	movs	r3, #2
 8004834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004836:	2302      	movs	r3, #2
 8004838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fd68 	bl	8003314 <HAL_RCC_OscConfig>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800484a:	f000 fe33 	bl	80054b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800484e:	230f      	movs	r3, #15
 8004850:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004852:	2302      	movs	r3, #2
 8004854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800485a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800485e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004864:	f107 0308 	add.w	r3, r7, #8
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe fa9c 	bl	8002da8 <HAL_RCC_ClockConfig>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004876:	f000 fe1d 	bl	80054b4 <Error_Handler>
  }
}
 800487a:	bf00      	nop
 800487c:	3750      	adds	r7, #80	; 0x50
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40007000 	.word	0x40007000

0800488c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004892:	463b      	mov	r3, r7
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800489e:	4b27      	ldr	r3, [pc, #156]	; (800493c <MX_ADC1_Init+0xb0>)
 80048a0:	4a27      	ldr	r2, [pc, #156]	; (8004940 <MX_ADC1_Init+0xb4>)
 80048a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <MX_ADC1_Init+0xb0>)
 80048a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048ac:	4b23      	ldr	r3, [pc, #140]	; (800493c <MX_ADC1_Init+0xb0>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80048b2:	4b22      	ldr	r3, [pc, #136]	; (800493c <MX_ADC1_Init+0xb0>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80048b8:	4b20      	ldr	r3, [pc, #128]	; (800493c <MX_ADC1_Init+0xb0>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048be:	4b1f      	ldr	r3, [pc, #124]	; (800493c <MX_ADC1_Init+0xb0>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <MX_ADC1_Init+0xb0>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <MX_ADC1_Init+0xb0>)
 80048ce:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <MX_ADC1_Init+0xb8>)
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048d2:	4b1a      	ldr	r3, [pc, #104]	; (800493c <MX_ADC1_Init+0xb0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80048d8:	4b18      	ldr	r3, [pc, #96]	; (800493c <MX_ADC1_Init+0xb0>)
 80048da:	2201      	movs	r2, #1
 80048dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80048de:	4b17      	ldr	r3, [pc, #92]	; (800493c <MX_ADC1_Init+0xb0>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <MX_ADC1_Init+0xb0>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048ec:	4813      	ldr	r0, [pc, #76]	; (800493c <MX_ADC1_Init+0xb0>)
 80048ee:	f7fc fbd7 	bl	80010a0 <HAL_ADC_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80048f8:	f000 fddc 	bl	80054b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004900:	2301      	movs	r3, #1
 8004902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004904:	2307      	movs	r3, #7
 8004906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004908:	463b      	mov	r3, r7
 800490a:	4619      	mov	r1, r3
 800490c:	480b      	ldr	r0, [pc, #44]	; (800493c <MX_ADC1_Init+0xb0>)
 800490e:	f7fc fd1b 	bl	8001348 <HAL_ADC_ConfigChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004918:	f000 fdcc 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <MX_ADC1_Init+0xb0>)
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004924:	4805      	ldr	r0, [pc, #20]	; (800493c <MX_ADC1_Init+0xb0>)
 8004926:	f7fc fbbb 	bl	80010a0 <HAL_ADC_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8004930:	f000 fdc0 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	2000053c 	.word	0x2000053c
 8004940:	40012000 	.word	0x40012000
 8004944:	0f000001 	.word	0x0f000001

08004948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <MX_I2C1_Init+0x50>)
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <MX_I2C1_Init+0x54>)
 8004950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <MX_I2C1_Init+0x50>)
 8004954:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <MX_I2C1_Init+0x58>)
 8004956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <MX_I2C1_Init+0x50>)
 800495a:	2200      	movs	r2, #0
 800495c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <MX_I2C1_Init+0x50>)
 8004960:	2200      	movs	r2, #0
 8004962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <MX_I2C1_Init+0x50>)
 8004966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800496a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <MX_I2C1_Init+0x50>)
 800496e:	2200      	movs	r2, #0
 8004970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <MX_I2C1_Init+0x50>)
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <MX_I2C1_Init+0x50>)
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <MX_I2C1_Init+0x50>)
 8004980:	2200      	movs	r2, #0
 8004982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004984:	4804      	ldr	r0, [pc, #16]	; (8004998 <MX_I2C1_Init+0x50>)
 8004986:	f7fd fddb 	bl	8002540 <HAL_I2C_Init>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004990:	f000 fd90 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004994:	bf00      	nop
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200004e0 	.word	0x200004e0
 800499c:	40005400 	.word	0x40005400
 80049a0:	000186a0 	.word	0x000186a0

080049a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b8:	463b      	mov	r3, r7
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049ca:	2253      	movs	r2, #83	; 0x53
 80049cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049dc:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049e8:	4813      	ldr	r0, [pc, #76]	; (8004a38 <MX_TIM2_Init+0x94>)
 80049ea:	f7fe feed 	bl	80037c8 <HAL_TIM_Base_Init>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80049f4:	f000 fd5e 	bl	80054b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049fe:	f107 0308 	add.w	r3, r7, #8
 8004a02:	4619      	mov	r1, r3
 8004a04:	480c      	ldr	r0, [pc, #48]	; (8004a38 <MX_TIM2_Init+0x94>)
 8004a06:	f7ff f861 	bl	8003acc <HAL_TIM_ConfigClockSource>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004a10:	f000 fd50 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4805      	ldr	r0, [pc, #20]	; (8004a38 <MX_TIM2_Init+0x94>)
 8004a22:	f7ff fa6d 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004a2c:	f000 fd42 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a30:	bf00      	nop
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200005e4 	.word	0x200005e4

08004a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a40:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <MX_USART2_UART_Init+0x50>)
 8004a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a62:	220c      	movs	r2, #12
 8004a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a72:	4805      	ldr	r0, [pc, #20]	; (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a74:	f7ff fa9d 	bl	8003fb2 <HAL_UART_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a7e:	f000 fd19 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000624 	.word	0x20000624
 8004a8c:	40004400 	.word	0x40004400

08004a90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <MX_DMA_Init+0x3c>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <MX_DMA_Init+0x3c>)
 8004aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <MX_DMA_Init+0x3c>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	2038      	movs	r0, #56	; 0x38
 8004ab8:	f7fc ffd1 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004abc:	2038      	movs	r0, #56	; 0x38
 8004abe:	f7fc ffea 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800

08004ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	609a      	str	r2, [r3, #8]
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	6313      	str	r3, [r2, #48]	; 0x30
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	4a32      	ldr	r2, [pc, #200]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b10:	6313      	str	r3, [r2, #48]	; 0x30
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	4b2c      	ldr	r3, [pc, #176]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b44:	f043 0302 	orr.w	r3, r3, #2
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <MX_GPIO_Init+0x104>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2120      	movs	r1, #32
 8004b5a:	481f      	ldr	r0, [pc, #124]	; (8004bd8 <MX_GPIO_Init+0x108>)
 8004b5c:	f7fd fcd6 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <MX_GPIO_Init+0x10c>)
 8004b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b6e:	f107 0314 	add.w	r3, r7, #20
 8004b72:	4619      	mov	r1, r3
 8004b74:	481a      	ldr	r0, [pc, #104]	; (8004be0 <MX_GPIO_Init+0x110>)
 8004b76:	f7fd fb1f 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004b8a:	f107 0314 	add.w	r3, r7, #20
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4811      	ldr	r0, [pc, #68]	; (8004bd8 <MX_GPIO_Init+0x108>)
 8004b92:	f7fd fb11 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_B_Pin FOOT_SW_Pin RIGHT_B_Pin LEFT_B_Pin */
  GPIO_InitStruct.Pin = UP_B_Pin|FOOT_SW_Pin|RIGHT_B_Pin|LEFT_B_Pin;
 8004b96:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	4619      	mov	r1, r3
 8004baa:	480e      	ldr	r0, [pc, #56]	; (8004be4 <MX_GPIO_Init+0x114>)
 8004bac:	f7fd fb04 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOWN_B_Pin */
  GPIO_InitStruct.Pin = DOWN_B_Pin;
 8004bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOWN_B_GPIO_Port, &GPIO_InitStruct);
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4804      	ldr	r0, [pc, #16]	; (8004bd8 <MX_GPIO_Init+0x108>)
 8004bc6:	f7fd faf7 	bl	80021b8 <HAL_GPIO_Init>

}
 8004bca:	bf00      	nop
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	10210000 	.word	0x10210000
 8004be0:	40020800 	.word	0x40020800
 8004be4:	40020400 	.word	0x40020400

08004be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	static long phase_tim=0;
	static int phase_flag = 0;
	static float d1;
	static float d2;
	static float d3;
	if(htim->Instance == TIM2){
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf8:	f040 80f6 	bne.w	8004de8 <HAL_TIM_PeriodElapsedCallback+0x200>
		d1 = d2;
 8004bfc:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a81      	ldr	r2, [pc, #516]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004c02:	6013      	str	r3, [r2, #0]
		d2 = d3;
 8004c04:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7e      	ldr	r2, [pc, #504]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004c0a:	6013      	str	r3, [r2, #0]
		d3 = (adcValue[0] - NormalizeParameter[0])/ NormalizeParameter[1];
 8004c0c:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c18:	4b7e      	ldr	r3, [pc, #504]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8004c1a:	edd3 7a00 	vldr	s15, [r3]
 8004c1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004c22:	4b7c      	ldr	r3, [pc, #496]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8004c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c2c:	4b77      	ldr	r3, [pc, #476]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004c2e:	edc3 7a00 	vstr	s15, [r3]
		if(d2 > threshold/100.0f && d1 < d2 && d2 > d3 && tim2_count > 100 && tim2_count > inactive_time && ((int)mode % 2) == 0){ //peak detect
 8004c32:	4b79      	ldr	r3, [pc, #484]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004c34:	edd3 7a00 	vldr	s15, [r3]
 8004c38:	eddf 6a78 	vldr	s13, [pc, #480]	; 8004e1c <HAL_TIM_PeriodElapsedCallback+0x234>
 8004c3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c40:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004c42:	edd3 7a00 	vldr	s15, [r3]
 8004c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	d53c      	bpl.n	8004cca <HAL_TIM_PeriodElapsedCallback+0xe2>
 8004c50:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004c52:	ed93 7a00 	vldr	s14, [r3]
 8004c56:	4b6b      	ldr	r3, [pc, #428]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	d531      	bpl.n	8004cca <HAL_TIM_PeriodElapsedCallback+0xe2>
 8004c66:	4b67      	ldr	r3, [pc, #412]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004c68:	ed93 7a00 	vldr	s14, [r3]
 8004c6c:	4b67      	ldr	r3, [pc, #412]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004c6e:	edd3 7a00 	vldr	s15, [r3]
 8004c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	dd26      	ble.n	8004cca <HAL_TIM_PeriodElapsedCallback+0xe2>
 8004c7c:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b64      	cmp	r3, #100	; 0x64
 8004c82:	dd22      	ble.n	8004cca <HAL_TIM_PeriodElapsedCallback+0xe2>
 8004c84:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8004c92:	edd3 7a00 	vldr	s15, [r3]
 8004c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9e:	dd14      	ble.n	8004cca <HAL_TIM_PeriodElapsedCallback+0xe2>
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004ca2:	edd3 7a00 	vldr	s15, [r3]
 8004ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004caa:	ee17 3a90 	vmov	r3, s15
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <HAL_TIM_PeriodElapsedCallback+0xe2>
			//HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
			tim2_count = 0;
 8004cb6:	4b5a      	ldr	r3, [pc, #360]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
			phase_flag = 1;
 8004cbc:	4b5b      	ldr	r3, [pc, #364]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
			phase_tim = 0;
 8004cc2:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e04d      	b.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>

		}else if(d2 < threshold/100.0f && d1 > d2 && d2 < d3 && tim2_count > 100 && tim2_count > inactive_time && ((int)mode % 2) == 1){ //trough detect
 8004cca:	4b53      	ldr	r3, [pc, #332]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004ccc:	edd3 7a00 	vldr	s15, [r3]
 8004cd0:	eddf 6a52 	vldr	s13, [pc, #328]	; 8004e1c <HAL_TIM_PeriodElapsedCallback+0x234>
 8004cd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cd8:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	dd3e      	ble.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8004ce8:	4b47      	ldr	r3, [pc, #284]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004cea:	ed93 7a00 	vldr	s14, [r3]
 8004cee:	4b45      	ldr	r3, [pc, #276]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004cf0:	edd3 7a00 	vldr	s15, [r3]
 8004cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfc:	dd33      	ble.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004d00:	ed93 7a00 	vldr	s14, [r3]
 8004d04:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004d06:	edd3 7a00 	vldr	s15, [r3]
 8004d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	d528      	bpl.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8004d14:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b64      	cmp	r3, #100	; 0x64
 8004d1a:	dd24      	ble.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8004d1c:	4b40      	ldr	r3, [pc, #256]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d28:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8004d2a:	edd3 7a00 	vldr	s15, [r3]
 8004d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	dd16      	ble.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8004d38:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004d3a:	edd3 7a00 	vldr	s15, [r3]
 8004d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d42:	ee17 3a90 	vmov	r3, s15
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	bfb8      	it	lt
 8004d4e:	425b      	neglt	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d108      	bne.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x17e>
			//HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
			tim2_count = 0;
 8004d54:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
			phase_flag = 1;
 8004d5a:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
			phase_tim = 0;
 8004d60:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]

		}

		if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0 && phase_flag == 1 && phase_tim > phase_ms){ //phase passed
 8004d66:	2120      	movs	r1, #32
 8004d68:	4832      	ldr	r0, [pc, #200]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004d6a:	f7fd fbb7 	bl	80024dc <HAL_GPIO_ReadPin>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d117      	bne.n	8004da4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8004d74:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d113      	bne.n	8004da4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004d8a:	edd3 7a00 	vldr	s15, [r3]
 8004d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d96:	dd05      	ble.n	8004da4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8004d98:	2201      	movs	r2, #1
 8004d9a:	2120      	movs	r1, #32
 8004d9c:	4825      	ldr	r0, [pc, #148]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004d9e:	f7fd fbb5 	bl	800250c <HAL_GPIO_WritePin>
 8004da2:	e021      	b.n	8004de8 <HAL_TIM_PeriodElapsedCallback+0x200>
		}else if(phase_flag == 1 && phase_tim > phase_ms + duration){ //phase+duration passed
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d11d      	bne.n	8004de8 <HAL_TIM_PeriodElapsedCallback+0x200>
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db8:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004dba:	edd3 6a00 	vldr	s13, [r3]
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004dc0:	edd3 7a00 	vldr	s15, [r3]
 8004dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	dd0a      	ble.n	8004de8 <HAL_TIM_PeriodElapsedCallback+0x200>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	4817      	ldr	r0, [pc, #92]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004dd8:	f7fd fb98 	bl	800250c <HAL_GPIO_WritePin>
			phase_flag = 0;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
			phase_tim = 0;
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
		}
	}
	tim2_count++;
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004df0:	6013      	str	r3, [r2, #0]
	phase_tim++;
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	200000b4 	.word	0x200000b4
 8004e08:	200000b8 	.word	0x200000b8
 8004e0c:	200000bc 	.word	0x200000bc
 8004e10:	20000664 	.word	0x20000664
 8004e14:	20000534 	.word	0x20000534
 8004e18:	20000010 	.word	0x20000010
 8004e1c:	42c80000 	.word	0x42c80000
 8004e20:	200000a4 	.word	0x200000a4
 8004e24:	200000b0 	.word	0x200000b0
 8004e28:	20000018 	.word	0x20000018
 8004e2c:	200000c0 	.word	0x200000c0
 8004e30:	200000c4 	.word	0x200000c4
 8004e34:	40020000 	.word	0x40020000
 8004e38:	200000ac 	.word	0x200000ac
 8004e3c:	20000014 	.word	0x20000014

08004e40 <SetUpNormalizeParameter>:

void SetUpNormalizeParameter(float NormalizeParameter[2]){
 8004e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e42:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	f107 0318 	add.w	r3, r7, #24
 8004e4e:	3b14      	subs	r3, #20
 8004e50:	6018      	str	r0, [r3, #0]
	float data[4096] = {0};
 8004e52:	f107 0318 	add.w	r3, r7, #24
 8004e56:	3b0c      	subs	r3, #12
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2100      	movs	r1, #0
 8004e62:	f000 ff71 	bl	8005d48 <memset>
	long sum = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004e6c:	f102 0214 	add.w	r2, r2, #20
 8004e70:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4096; i++){
 8004e72:	2300      	movs	r3, #0
 8004e74:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004e78:	f102 0210 	add.w	r2, r2, #16
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e03f      	b.n	8004f00 <SetUpNormalizeParameter+0xc0>
		data[i] = adcValue[0];
 8004e80:	4b75      	ldr	r3, [pc, #468]	; (8005058 <SetUpNormalizeParameter+0x218>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8c:	f107 0318 	add.w	r3, r7, #24
 8004e90:	3b0c      	subs	r3, #12
 8004e92:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004e96:	f102 0210 	add.w	r2, r2, #16
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	edc3 7a00 	vstr	s15, [r3]
		sum += data[i];
 8004ea4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004ea8:	f103 0314 	add.w	r3, r3, #20
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eb6:	f107 0318 	add.w	r3, r7, #24
 8004eba:	3b0c      	subs	r3, #12
 8004ebc:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004ec0:	f102 0210 	add.w	r2, r2, #16
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	edd3 7a00 	vldr	s15, [r3]
 8004ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ed6:	ee17 3a90 	vmov	r3, s15
 8004eda:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004ede:	f102 0214 	add.w	r2, r2, #20
 8004ee2:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f7fc f8b9 	bl	800105c <HAL_Delay>
	for(int i = 0; i < 4096; i++){
 8004eea:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004eee:	f103 0310 	add.w	r3, r3, #16
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004efa:	f102 0210 	add.w	r2, r2, #16
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004f04:	f103 0310 	add.w	r3, r3, #16
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0e:	dbb7      	blt.n	8004e80 <SetUpNormalizeParameter+0x40>
	}
	NormalizeParameter[0] = sum/4096.0f;
 8004f10:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004f14:	f103 0314 	add.w	r3, r3, #20
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f22:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800505c <SetUpNormalizeParameter+0x21c>
 8004f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f2a:	f107 0318 	add.w	r3, r7, #24
 8004f2e:	3b14      	subs	r3, #20
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	edc3 7a00 	vstr	s15, [r3]
	sum = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004f3c:	f102 0214 	add.w	r2, r2, #20
 8004f40:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4096; i++){
 8004f42:	2300      	movs	r3, #0
 8004f44:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004f48:	f102 020c 	add.w	r2, r2, #12
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e047      	b.n	8004fe0 <SetUpNormalizeParameter+0x1a0>
		sum += pow(data[i] - NormalizeParameter[0],2);
 8004f50:	f107 0318 	add.w	r3, r7, #24
 8004f54:	3b0c      	subs	r3, #12
 8004f56:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004f5a:	f102 020c 	add.w	r2, r2, #12
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	0092      	lsls	r2, r2, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	ed93 7a00 	vldr	s14, [r3]
 8004f68:	f107 0318 	add.w	r3, r7, #24
 8004f6c:	3b14      	subs	r3, #20
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	edd3 7a00 	vldr	s15, [r3]
 8004f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f78:	ee17 0a90 	vmov	r0, s15
 8004f7c:	f7fb fafc 	bl	8000578 <__aeabi_f2d>
 8004f80:	4603      	mov	r3, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8005048 <SetUpNormalizeParameter+0x208>
 8004f88:	ec44 3b10 	vmov	d0, r3, r4
 8004f8c:	f001 faea 	bl	8006564 <pow>
 8004f90:	ec56 5b10 	vmov	r5, r6, d0
 8004f94:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004f98:	f103 0314 	add.w	r3, r3, #20
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f7fb fad9 	bl	8000554 <__aeabi_i2d>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4623      	mov	r3, r4
 8004faa:	4628      	mov	r0, r5
 8004fac:	4631      	mov	r1, r6
 8004fae:	f7fb f985 	bl	80002bc <__adddf3>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f7fb fde5 	bl	8000b88 <__aeabi_d2iz>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004fc4:	f102 0214 	add.w	r2, r2, #20
 8004fc8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4096; i++){
 8004fca:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004fce:	f103 030c 	add.w	r3, r3, #12
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004fda:	f102 020c 	add.w	r2, r2, #12
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004fe4:	f103 030c 	add.w	r3, r3, #12
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	dbaf      	blt.n	8004f50 <SetUpNormalizeParameter+0x110>
	}
	NormalizeParameter[1] = pow(sum/4096.0f,0.5);
 8004ff0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004ff4:	f103 0314 	add.w	r3, r3, #20
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005002:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800505c <SetUpNormalizeParameter+0x21c>
 8005006:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800500a:	ee16 0a90 	vmov	r0, s13
 800500e:	f7fb fab3 	bl	8000578 <__aeabi_f2d>
 8005012:	4603      	mov	r3, r0
 8005014:	460c      	mov	r4, r1
 8005016:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8005050 <SetUpNormalizeParameter+0x210>
 800501a:	ec44 3b10 	vmov	d0, r3, r4
 800501e:	f001 faa1 	bl	8006564 <pow>
 8005022:	ec52 1b10 	vmov	r1, r2, d0
 8005026:	f107 0318 	add.w	r3, r7, #24
 800502a:	3b14      	subs	r3, #20
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	1d1c      	adds	r4, r3, #4
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	f7fb fdd0 	bl	8000bd8 <__aeabi_d2f>
 8005038:	4603      	mov	r3, r0
 800503a:	6023      	str	r3, [r4, #0]
}
 800503c:	bf00      	nop
 800503e:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005048:	00000000 	.word	0x00000000
 800504c:	40000000 	.word	0x40000000
 8005050:	00000000 	.word	0x00000000
 8005054:	3fe00000 	.word	0x3fe00000
 8005058:	20000664 	.word	0x20000664
 800505c:	45800000 	.word	0x45800000

08005060 <DrawParameter>:

void DrawParameter(int count){
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	char buf[32] = {};
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	2220      	movs	r2, #32
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fe69 	bl	8005d48 <memset>

	ssd1306_Fill(White);
 8005076:	2001      	movs	r0, #1
 8005078:	f000 faa8 	bl	80055cc <ssd1306_Fill>

	ssd1306_SetCursor(0,0);
 800507c:	2100      	movs	r1, #0
 800507e:	2000      	movs	r0, #0
 8005080:	f000 fbfc 	bl	800587c <ssd1306_SetCursor>
	sprintf(buf,"%sth=%d [%%]",count==0?"*":" ", (int)threshold);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <DrawParameter+0x2e>
 800508a:	4a4d      	ldr	r2, [pc, #308]	; (80051c0 <DrawParameter+0x160>)
 800508c:	e000      	b.n	8005090 <DrawParameter+0x30>
 800508e:	4a4d      	ldr	r2, [pc, #308]	; (80051c4 <DrawParameter+0x164>)
 8005090:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <DrawParameter+0x168>)
 8005092:	edd3 7a00 	vldr	s15, [r3]
 8005096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800509a:	f107 0008 	add.w	r0, r7, #8
 800509e:	ee17 3a90 	vmov	r3, s15
 80050a2:	494a      	ldr	r1, [pc, #296]	; (80051cc <DrawParameter+0x16c>)
 80050a4:	f000 fe58 	bl	8005d58 <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 80050a8:	4a49      	ldr	r2, [pc, #292]	; (80051d0 <DrawParameter+0x170>)
 80050aa:	f107 0008 	add.w	r0, r7, #8
 80050ae:	2300      	movs	r3, #0
 80050b0:	ca06      	ldmia	r2, {r1, r2}
 80050b2:	f000 fbbd 	bl	8005830 <ssd1306_WriteString>

	ssd1306_SetCursor(0,12);
 80050b6:	210c      	movs	r1, #12
 80050b8:	2000      	movs	r0, #0
 80050ba:	f000 fbdf 	bl	800587c <ssd1306_SetCursor>
	sprintf(buf,"%sdu=%d [ms]",count==1?"*":" ", (int)duration);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <DrawParameter+0x68>
 80050c4:	4a3e      	ldr	r2, [pc, #248]	; (80051c0 <DrawParameter+0x160>)
 80050c6:	e000      	b.n	80050ca <DrawParameter+0x6a>
 80050c8:	4a3e      	ldr	r2, [pc, #248]	; (80051c4 <DrawParameter+0x164>)
 80050ca:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <DrawParameter+0x174>)
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d4:	f107 0008 	add.w	r0, r7, #8
 80050d8:	ee17 3a90 	vmov	r3, s15
 80050dc:	493e      	ldr	r1, [pc, #248]	; (80051d8 <DrawParameter+0x178>)
 80050de:	f000 fe3b 	bl	8005d58 <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 80050e2:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <DrawParameter+0x170>)
 80050e4:	f107 0008 	add.w	r0, r7, #8
 80050e8:	2300      	movs	r3, #0
 80050ea:	ca06      	ldmia	r2, {r1, r2}
 80050ec:	f000 fba0 	bl	8005830 <ssd1306_WriteString>

	ssd1306_SetCursor(0,24);
 80050f0:	2118      	movs	r1, #24
 80050f2:	2000      	movs	r0, #0
 80050f4:	f000 fbc2 	bl	800587c <ssd1306_SetCursor>
	sprintf(buf,"%sph=%d [deg]",count==2?"*":" ", (int)phase);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d101      	bne.n	8005102 <DrawParameter+0xa2>
 80050fe:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <DrawParameter+0x160>)
 8005100:	e000      	b.n	8005104 <DrawParameter+0xa4>
 8005102:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <DrawParameter+0x164>)
 8005104:	4b35      	ldr	r3, [pc, #212]	; (80051dc <DrawParameter+0x17c>)
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800510e:	f107 0008 	add.w	r0, r7, #8
 8005112:	ee17 3a90 	vmov	r3, s15
 8005116:	4932      	ldr	r1, [pc, #200]	; (80051e0 <DrawParameter+0x180>)
 8005118:	f000 fe1e 	bl	8005d58 <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 800511c:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <DrawParameter+0x170>)
 800511e:	f107 0008 	add.w	r0, r7, #8
 8005122:	2300      	movs	r3, #0
 8005124:	ca06      	ldmia	r2, {r1, r2}
 8005126:	f000 fb83 	bl	8005830 <ssd1306_WriteString>

	ssd1306_SetCursor(0,36);
 800512a:	2124      	movs	r1, #36	; 0x24
 800512c:	2000      	movs	r0, #0
 800512e:	f000 fba5 	bl	800587c <ssd1306_SetCursor>
	sprintf(buf,"%sinactive=%d [sec]",count==3?"*":" ", (int)inactive_time);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d101      	bne.n	800513c <DrawParameter+0xdc>
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <DrawParameter+0x160>)
 800513a:	e000      	b.n	800513e <DrawParameter+0xde>
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <DrawParameter+0x164>)
 800513e:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <DrawParameter+0x184>)
 8005140:	edd3 7a00 	vldr	s15, [r3]
 8005144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005148:	f107 0008 	add.w	r0, r7, #8
 800514c:	ee17 3a90 	vmov	r3, s15
 8005150:	4925      	ldr	r1, [pc, #148]	; (80051e8 <DrawParameter+0x188>)
 8005152:	f000 fe01 	bl	8005d58 <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <DrawParameter+0x170>)
 8005158:	f107 0008 	add.w	r0, r7, #8
 800515c:	2300      	movs	r3, #0
 800515e:	ca06      	ldmia	r2, {r1, r2}
 8005160:	f000 fb66 	bl	8005830 <ssd1306_WriteString>

	ssd1306_SetCursor(0,48);
 8005164:	2130      	movs	r1, #48	; 0x30
 8005166:	2000      	movs	r0, #0
 8005168:	f000 fb88 	bl	800587c <ssd1306_SetCursor>
	sprintf(buf,"%smode=%s ",count==4?"*":" ",  ((int)mode % 2) == 1 ? "trough":"peak");
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d101      	bne.n	8005176 <DrawParameter+0x116>
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <DrawParameter+0x160>)
 8005174:	e000      	b.n	8005178 <DrawParameter+0x118>
 8005176:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <DrawParameter+0x164>)
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <DrawParameter+0x18c>)
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005182:	ee17 3a90 	vmov	r3, s15
 8005186:	2b00      	cmp	r3, #0
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	bfb8      	it	lt
 800518e:	425b      	neglt	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <DrawParameter+0x138>
 8005194:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <DrawParameter+0x190>)
 8005196:	e000      	b.n	800519a <DrawParameter+0x13a>
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <DrawParameter+0x194>)
 800519a:	f107 0008 	add.w	r0, r7, #8
 800519e:	4916      	ldr	r1, [pc, #88]	; (80051f8 <DrawParameter+0x198>)
 80051a0:	f000 fdda 	bl	8005d58 <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <DrawParameter+0x170>)
 80051a6:	f107 0008 	add.w	r0, r7, #8
 80051aa:	2300      	movs	r3, #0
 80051ac:	ca06      	ldmia	r2, {r1, r2}
 80051ae:	f000 fb3f 	bl	8005830 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80051b2:	f000 fa2d 	bl	8005610 <ssd1306_UpdateScreen>
}
 80051b6:	bf00      	nop
 80051b8:	3728      	adds	r7, #40	; 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	0800765c 	.word	0x0800765c
 80051c4:	08007660 	.word	0x08007660
 80051c8:	20000010 	.word	0x20000010
 80051cc:	08007664 	.word	0x08007664
 80051d0:	20000008 	.word	0x20000008
 80051d4:	20000014 	.word	0x20000014
 80051d8:	08007674 	.word	0x08007674
 80051dc:	200000a8 	.word	0x200000a8
 80051e0:	08007684 	.word	0x08007684
 80051e4:	200000b0 	.word	0x200000b0
 80051e8:	08007694 	.word	0x08007694
 80051ec:	20000018 	.word	0x20000018
 80051f0:	080076a8 	.word	0x080076a8
 80051f4:	080076b0 	.word	0x080076b0
 80051f8:	080076b8 	.word	0x080076b8

080051fc <UserSetUp>:
void UserSetUp(void){
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0

	  char buf[32] = {};
 8005202:	463b      	mov	r3, r7
 8005204:	2220      	movs	r2, #32
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fd9d 	bl	8005d48 <memset>
	  int count = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
	  float *param_pointer;
	  param_pointer = &threshold;
 8005212:	4b99      	ldr	r3, [pc, #612]	; (8005478 <UserSetUp+0x27c>)
 8005214:	623b      	str	r3, [r7, #32]

	  ssd1306_Fill(White);
 8005216:	2001      	movs	r0, #1
 8005218:	f000 f9d8 	bl	80055cc <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 800521c:	f000 f9f8 	bl	8005610 <ssd1306_UpdateScreen>
	  DrawParameter(0);
 8005220:	2000      	movs	r0, #0
 8005222:	f7ff ff1d 	bl	8005060 <DrawParameter>

	  while(1){
		if(HAL_GPIO_ReadPin(GPIOB, UP_B_Pin) == 0){ //UP button
 8005226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800522a:	4894      	ldr	r0, [pc, #592]	; (800547c <UserSetUp+0x280>)
 800522c:	f7fd f956 	bl	80024dc <HAL_GPIO_ReadPin>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d136      	bne.n	80052a4 <UserSetUp+0xa8>
			switch(count){
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b02      	cmp	r3, #2
 800523a:	d00e      	beq.n	800525a <UserSetUp+0x5e>
 800523c:	2b03      	cmp	r3, #3
 800523e:	d017      	beq.n	8005270 <UserSetUp+0x74>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d120      	bne.n	8005286 <UserSetUp+0x8a>
				case 0:
					*param_pointer += 1.0f; //change value of destination of pointer
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	edd3 7a00 	vldr	s15, [r3]
 800524a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	edc3 7a00 	vstr	s15, [r3]
					break;
 8005258:	e020      	b.n	800529c <UserSetUp+0xa0>
				case 2:
					*param_pointer += 10.0f;
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800526e:	e015      	b.n	800529c <UserSetUp+0xa0>
				case 3:
					*param_pointer += 100.0f;
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	edd3 7a00 	vldr	s15, [r3]
 8005276:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8005480 <UserSetUp+0x284>
 800527a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	edc3 7a00 	vstr	s15, [r3]
					break;
 8005284:	e00a      	b.n	800529c <UserSetUp+0xa0>
				default:
					*param_pointer += 1.0f;
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	edd3 7a00 	vldr	s15, [r3]
 800528c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	edc3 7a00 	vstr	s15, [r3]
					break;
 800529a:	bf00      	nop
			}
			DrawParameter(count);
 800529c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800529e:	f7ff fedf 	bl	8005060 <DrawParameter>
 80052a2:	e7c0      	b.n	8005226 <UserSetUp+0x2a>

		}else if(HAL_GPIO_ReadPin(DOWN_B_GPIO_Port, DOWN_B_Pin) == 0){ //down button
 80052a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052a8:	4876      	ldr	r0, [pc, #472]	; (8005484 <UserSetUp+0x288>)
 80052aa:	f7fd f917 	bl	80024dc <HAL_GPIO_ReadPin>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d136      	bne.n	8005322 <UserSetUp+0x126>
			switch(count){
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d00e      	beq.n	80052d8 <UserSetUp+0xdc>
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d017      	beq.n	80052ee <UserSetUp+0xf2>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d120      	bne.n	8005304 <UserSetUp+0x108>
				case 0:
					*param_pointer -= 1.0f;
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	edc3 7a00 	vstr	s15, [r3]
					break;
 80052d6:	e020      	b.n	800531a <UserSetUp+0x11e>
				case 2:
					*param_pointer -= 10.0f;
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	edd3 7a00 	vldr	s15, [r3]
 80052de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80052e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	edc3 7a00 	vstr	s15, [r3]
					break;
 80052ec:	e015      	b.n	800531a <UserSetUp+0x11e>
				case 3:
					*param_pointer -= 100.0f;
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	edd3 7a00 	vldr	s15, [r3]
 80052f4:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8005480 <UserSetUp+0x284>
 80052f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	edc3 7a00 	vstr	s15, [r3]
					break;
 8005302:	e00a      	b.n	800531a <UserSetUp+0x11e>
				default:
					*param_pointer -= 1.0f;
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	edd3 7a00 	vldr	s15, [r3]
 800530a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800530e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	edc3 7a00 	vstr	s15, [r3]
					break;
 8005318:	bf00      	nop
			}
			DrawParameter(count);
 800531a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800531c:	f7ff fea0 	bl	8005060 <DrawParameter>
 8005320:	e781      	b.n	8005226 <UserSetUp+0x2a>

		}else if(HAL_GPIO_ReadPin(GPIOB, LEFT_B_Pin) == 0){ //left button pressed
 8005322:	2120      	movs	r1, #32
 8005324:	4855      	ldr	r0, [pc, #340]	; (800547c <UserSetUp+0x280>)
 8005326:	f7fd f8d9 	bl	80024dc <HAL_GPIO_ReadPin>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d13d      	bne.n	80053ac <UserSetUp+0x1b0>
			count++;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	3301      	adds	r3, #1
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
			switch(count){
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2b04      	cmp	r3, #4
 800533a:	d82b      	bhi.n	8005394 <UserSetUp+0x198>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UserSetUp+0x148>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005359 	.word	0x08005359
 8005348:	08005365 	.word	0x08005365
 800534c:	08005371 	.word	0x08005371
 8005350:	0800537d 	.word	0x0800537d
 8005354:	08005389 	.word	0x08005389
				case 0:
					param_pointer = &threshold; //change pointer destination
 8005358:	4b47      	ldr	r3, [pc, #284]	; (8005478 <UserSetUp+0x27c>)
 800535a:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 800535c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800535e:	f7ff fe7f 	bl	8005060 <DrawParameter>
					break;
 8005362:	e01f      	b.n	80053a4 <UserSetUp+0x1a8>
				case 1:
					param_pointer = &duration;
 8005364:	4b48      	ldr	r3, [pc, #288]	; (8005488 <UserSetUp+0x28c>)
 8005366:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 8005368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800536a:	f7ff fe79 	bl	8005060 <DrawParameter>
					break;
 800536e:	e019      	b.n	80053a4 <UserSetUp+0x1a8>
				case 2:
					param_pointer = &phase;
 8005370:	4b46      	ldr	r3, [pc, #280]	; (800548c <UserSetUp+0x290>)
 8005372:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 8005374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005376:	f7ff fe73 	bl	8005060 <DrawParameter>
					break;
 800537a:	e013      	b.n	80053a4 <UserSetUp+0x1a8>
				case 3:
					param_pointer = &inactive_time;
 800537c:	4b44      	ldr	r3, [pc, #272]	; (8005490 <UserSetUp+0x294>)
 800537e:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 8005380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005382:	f7ff fe6d 	bl	8005060 <DrawParameter>
					break;
 8005386:	e00d      	b.n	80053a4 <UserSetUp+0x1a8>
				case 4:
					param_pointer = &mode;
 8005388:	4b42      	ldr	r3, [pc, #264]	; (8005494 <UserSetUp+0x298>)
 800538a:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 800538c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800538e:	f7ff fe67 	bl	8005060 <DrawParameter>
					break;
 8005392:	e007      	b.n	80053a4 <UserSetUp+0x1a8>
				default:
					param_pointer = &threshold;
 8005394:	4b38      	ldr	r3, [pc, #224]	; (8005478 <UserSetUp+0x27c>)
 8005396:	623b      	str	r3, [r7, #32]
					count = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
					DrawParameter(count);
 800539c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800539e:	f7ff fe5f 	bl	8005060 <DrawParameter>
					break;
 80053a2:	bf00      	nop
			}
			HAL_Delay(100);
 80053a4:	2064      	movs	r0, #100	; 0x64
 80053a6:	f7fb fe59 	bl	800105c <HAL_Delay>
 80053aa:	e73c      	b.n	8005226 <UserSetUp+0x2a>
		}else if(HAL_GPIO_ReadPin(GPIOB, RIGHT_B_Pin) == 0){
 80053ac:	2110      	movs	r1, #16
 80053ae:	4833      	ldr	r0, [pc, #204]	; (800547c <UserSetUp+0x280>)
 80053b0:	f7fd f894 	bl	80024dc <HAL_GPIO_ReadPin>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f47f af35 	bne.w	8005226 <UserSetUp+0x2a>
			sprintf(buf,"Setting Complete");
 80053bc:	463b      	mov	r3, r7
 80053be:	4a36      	ldr	r2, [pc, #216]	; (8005498 <UserSetUp+0x29c>)
 80053c0:	461c      	mov	r4, r3
 80053c2:	4615      	mov	r5, r2
 80053c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	7023      	strb	r3, [r4, #0]
			ssd1306_Fill(White);
 80053cc:	2001      	movs	r0, #1
 80053ce:	f000 f8fd 	bl	80055cc <ssd1306_Fill>
			ssd1306_SetCursor(0,0);
 80053d2:	2100      	movs	r1, #0
 80053d4:	2000      	movs	r0, #0
 80053d6:	f000 fa51 	bl	800587c <ssd1306_SetCursor>
			ssd1306_WriteString(buf,Font_7x10,Black);
 80053da:	4a30      	ldr	r2, [pc, #192]	; (800549c <UserSetUp+0x2a0>)
 80053dc:	4638      	mov	r0, r7
 80053de:	2300      	movs	r3, #0
 80053e0:	ca06      	ldmia	r2, {r1, r2}
 80053e2:	f000 fa25 	bl	8005830 <ssd1306_WriteString>

			sprintf(buf,"Waiting for Learning");
 80053e6:	463b      	mov	r3, r7
 80053e8:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <UserSetUp+0x2a4>)
 80053ea:	461c      	mov	r4, r3
 80053ec:	4615      	mov	r5, r2
 80053ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053f6:	6020      	str	r0, [r4, #0]
 80053f8:	3404      	adds	r4, #4
 80053fa:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(0,12);
 80053fc:	210c      	movs	r1, #12
 80053fe:	2000      	movs	r0, #0
 8005400:	f000 fa3c 	bl	800587c <ssd1306_SetCursor>
			ssd1306_WriteString(buf,Font_7x10,Black);
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <UserSetUp+0x2a0>)
 8005406:	4638      	mov	r0, r7
 8005408:	2300      	movs	r3, #0
 800540a:	ca06      	ldmia	r2, {r1, r2}
 800540c:	f000 fa10 	bl	8005830 <ssd1306_WriteString>

			ssd1306_UpdateScreen();
 8005410:	f000 f8fe 	bl	8005610 <ssd1306_UpdateScreen>
			HAL_Delay(500);
 8005414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005418:	f7fb fe20 	bl	800105c <HAL_Delay>
			break;
		}
	  }
	  while(1){
		  if(HAL_GPIO_ReadPin(GPIOB, RIGHT_B_Pin) == 0){
 800541c:	2110      	movs	r1, #16
 800541e:	4817      	ldr	r0, [pc, #92]	; (800547c <UserSetUp+0x280>)
 8005420:	f7fd f85c 	bl	80024dc <HAL_GPIO_ReadPin>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f8      	bne.n	800541c <UserSetUp+0x220>
			  sprintf(buf,"Learning...");
 800542a:	463b      	mov	r3, r7
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <UserSetUp+0x2a8>)
 800542e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  ssd1306_Fill(White);
 8005434:	2001      	movs	r0, #1
 8005436:	f000 f8c9 	bl	80055cc <ssd1306_Fill>
			  ssd1306_SetCursor(0,0);
 800543a:	2100      	movs	r1, #0
 800543c:	2000      	movs	r0, #0
 800543e:	f000 fa1d 	bl	800587c <ssd1306_SetCursor>
			  ssd1306_WriteString(buf,Font_7x10,Black);
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <UserSetUp+0x2a0>)
 8005444:	4638      	mov	r0, r7
 8005446:	2300      	movs	r3, #0
 8005448:	ca06      	ldmia	r2, {r1, r2}
 800544a:	f000 f9f1 	bl	8005830 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 800544e:	f000 f8df 	bl	8005610 <ssd1306_UpdateScreen>
			  break;
 8005452:	bf00      	nop
		  }
	  }
	  phase_ms = (phase/360.0f)*142.0f;
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <UserSetUp+0x290>)
 8005456:	ed93 7a00 	vldr	s14, [r3]
 800545a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80054a8 <UserSetUp+0x2ac>
 800545e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005462:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80054ac <UserSetUp+0x2b0>
 8005466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <UserSetUp+0x2b4>)
 800546c:	edc3 7a00 	vstr	s15, [r3]
}
 8005470:	bf00      	nop
 8005472:	3728      	adds	r7, #40	; 0x28
 8005474:	46bd      	mov	sp, r7
 8005476:	bdb0      	pop	{r4, r5, r7, pc}
 8005478:	20000010 	.word	0x20000010
 800547c:	40020400 	.word	0x40020400
 8005480:	42c80000 	.word	0x42c80000
 8005484:	40020000 	.word	0x40020000
 8005488:	20000014 	.word	0x20000014
 800548c:	200000a8 	.word	0x200000a8
 8005490:	200000b0 	.word	0x200000b0
 8005494:	20000018 	.word	0x20000018
 8005498:	080076c4 	.word	0x080076c4
 800549c:	20000008 	.word	0x20000008
 80054a0:	080076d8 	.word	0x080076d8
 80054a4:	080076f0 	.word	0x080076f0
 80054a8:	43b40000 	.word	0x43b40000
 80054ac:	430e0000 	.word	0x430e0000
 80054b0:	200000ac 	.word	0x200000ac

080054b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af04      	add	r7, sp, #16
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80054ce:	230a      	movs	r3, #10
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	2301      	movs	r3, #1
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	1dfb      	adds	r3, r7, #7
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2301      	movs	r3, #1
 80054dc:	2200      	movs	r2, #0
 80054de:	2178      	movs	r1, #120	; 0x78
 80054e0:	4803      	ldr	r0, [pc, #12]	; (80054f0 <ssd1306_WriteCommand+0x2c>)
 80054e2:	f7fd f955 	bl	8002790 <HAL_I2C_Mem_Write>
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200004e0 	.word	0x200004e0

080054f4 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80054f8:	2064      	movs	r0, #100	; 0x64
 80054fa:	f7fb fdaf 	bl	800105c <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80054fe:	20ae      	movs	r0, #174	; 0xae
 8005500:	f7ff ffe0 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8005504:	2020      	movs	r0, #32
 8005506:	f7ff ffdd 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800550a:	2010      	movs	r0, #16
 800550c:	f7ff ffda 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005510:	20b0      	movs	r0, #176	; 0xb0
 8005512:	f7ff ffd7 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005516:	20c8      	movs	r0, #200	; 0xc8
 8005518:	f7ff ffd4 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800551c:	2000      	movs	r0, #0
 800551e:	f7ff ffd1 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8005522:	2010      	movs	r0, #16
 8005524:	f7ff ffce 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8005528:	2040      	movs	r0, #64	; 0x40
 800552a:	f7ff ffcb 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800552e:	2081      	movs	r0, #129	; 0x81
 8005530:	f7ff ffc8 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8005534:	20ff      	movs	r0, #255	; 0xff
 8005536:	f7ff ffc5 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800553a:	20a1      	movs	r0, #161	; 0xa1
 800553c:	f7ff ffc2 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8005540:	20a6      	movs	r0, #166	; 0xa6
 8005542:	f7ff ffbf 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8005546:	20a8      	movs	r0, #168	; 0xa8
 8005548:	f7ff ffbc 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800554c:	203f      	movs	r0, #63	; 0x3f
 800554e:	f7ff ffb9 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005552:	20a4      	movs	r0, #164	; 0xa4
 8005554:	f7ff ffb6 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8005558:	20d3      	movs	r0, #211	; 0xd3
 800555a:	f7ff ffb3 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800555e:	2000      	movs	r0, #0
 8005560:	f7ff ffb0 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005564:	20d5      	movs	r0, #213	; 0xd5
 8005566:	f7ff ffad 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800556a:	20f0      	movs	r0, #240	; 0xf0
 800556c:	f7ff ffaa 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005570:	20d9      	movs	r0, #217	; 0xd9
 8005572:	f7ff ffa7 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8005576:	2022      	movs	r0, #34	; 0x22
 8005578:	f7ff ffa4 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800557c:	20da      	movs	r0, #218	; 0xda
 800557e:	f7ff ffa1 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8005582:	2012      	movs	r0, #18
 8005584:	f7ff ff9e 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005588:	20db      	movs	r0, #219	; 0xdb
 800558a:	f7ff ff9b 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800558e:	2020      	movs	r0, #32
 8005590:	f7ff ff98 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005594:	208d      	movs	r0, #141	; 0x8d
 8005596:	f7ff ff95 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800559a:	2014      	movs	r0, #20
 800559c:	f7ff ff92 	bl	80054c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80055a0:	20af      	movs	r0, #175	; 0xaf
 80055a2:	f7ff ff8f 	bl	80054c4 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 80055a6:	2000      	movs	r0, #0
 80055a8:	f000 f810 	bl	80055cc <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80055ac:	f000 f830 	bl	8005610 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <ssd1306_Init+0xd4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <ssd1306_Init+0xd4>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <ssd1306_Init+0xd4>)
 80055be:	2201      	movs	r2, #1
 80055c0:	715a      	strb	r2, [r3, #5]
	
	return 1;
 80055c2:	2301      	movs	r3, #1
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200004c8 	.word	0x200004c8

080055cc <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e00d      	b.n	80055f8 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <ssd1306_Fill+0x1a>
 80055e2:	2100      	movs	r1, #0
 80055e4:	e000      	b.n	80055e8 <ssd1306_Fill+0x1c>
 80055e6:	21ff      	movs	r1, #255	; 0xff
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <ssd1306_Fill+0x40>)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	460a      	mov	r2, r1
 80055f0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055fe:	d3ed      	bcc.n	80055dc <ssd1306_Fill+0x10>
	}
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	200000c8 	.word	0x200000c8

08005610 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8005616:	2300      	movs	r3, #0
 8005618:	71fb      	strb	r3, [r7, #7]
 800561a:	e01d      	b.n	8005658 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	3b50      	subs	r3, #80	; 0x50
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff4e 	bl	80054c4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8005628:	2000      	movs	r0, #0
 800562a:	f7ff ff4b 	bl	80054c4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800562e:	2010      	movs	r0, #16
 8005630:	f7ff ff48 	bl	80054c4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	01db      	lsls	r3, r3, #7
 8005638:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <ssd1306_UpdateScreen+0x58>)
 800563a:	4413      	add	r3, r2
 800563c:	2264      	movs	r2, #100	; 0x64
 800563e:	9202      	str	r2, [sp, #8]
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	9201      	str	r2, [sp, #4]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	2301      	movs	r3, #1
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	2178      	movs	r1, #120	; 0x78
 800564c:	4807      	ldr	r0, [pc, #28]	; (800566c <ssd1306_UpdateScreen+0x5c>)
 800564e:	f7fd f89f 	bl	8002790 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	3301      	adds	r3, #1
 8005656:	71fb      	strb	r3, [r7, #7]
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b07      	cmp	r3, #7
 800565c:	d9de      	bls.n	800561c <ssd1306_UpdateScreen+0xc>
	}
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200000c8 	.word	0x200000c8
 800566c:	200004e0 	.word	0x200004e0

08005670 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
 800567a:	460b      	mov	r3, r1
 800567c:	71bb      	strb	r3, [r7, #6]
 800567e:	4613      	mov	r3, r2
 8005680:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	2b00      	cmp	r3, #0
 8005688:	db48      	blt.n	800571c <ssd1306_DrawPixel+0xac>
 800568a:	79bb      	ldrb	r3, [r7, #6]
 800568c:	2b3f      	cmp	r3, #63	; 0x3f
 800568e:	d845      	bhi.n	800571c <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <ssd1306_DrawPixel+0xb8>)
 8005692:	791b      	ldrb	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d006      	beq.n	80056a6 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8005698:	797b      	ldrb	r3, [r7, #5]
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 80056a6:	797b      	ldrb	r3, [r7, #5]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d11a      	bne.n	80056e2 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80056ac:	79fa      	ldrb	r2, [r7, #7]
 80056ae:	79bb      	ldrb	r3, [r7, #6]
 80056b0:	08db      	lsrs	r3, r3, #3
 80056b2:	b2d8      	uxtb	r0, r3
 80056b4:	4603      	mov	r3, r0
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	4413      	add	r3, r2
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <ssd1306_DrawPixel+0xbc>)
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
 80056be:	b25a      	sxtb	r2, r3
 80056c0:	79bb      	ldrb	r3, [r7, #6]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2101      	movs	r1, #1
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b259      	sxtb	r1, r3
 80056d2:	79fa      	ldrb	r2, [r7, #7]
 80056d4:	4603      	mov	r3, r0
 80056d6:	01db      	lsls	r3, r3, #7
 80056d8:	4413      	add	r3, r2
 80056da:	b2c9      	uxtb	r1, r1
 80056dc:	4a13      	ldr	r2, [pc, #76]	; (800572c <ssd1306_DrawPixel+0xbc>)
 80056de:	54d1      	strb	r1, [r2, r3]
 80056e0:	e01d      	b.n	800571e <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80056e2:	79fa      	ldrb	r2, [r7, #7]
 80056e4:	79bb      	ldrb	r3, [r7, #6]
 80056e6:	08db      	lsrs	r3, r3, #3
 80056e8:	b2d8      	uxtb	r0, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	01db      	lsls	r3, r3, #7
 80056ee:	4413      	add	r3, r2
 80056f0:	4a0e      	ldr	r2, [pc, #56]	; (800572c <ssd1306_DrawPixel+0xbc>)
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	b25a      	sxtb	r2, r3
 80056f6:	79bb      	ldrb	r3, [r7, #6]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	b25b      	sxtb	r3, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	b25b      	sxtb	r3, r3
 8005708:	4013      	ands	r3, r2
 800570a:	b259      	sxtb	r1, r3
 800570c:	79fa      	ldrb	r2, [r7, #7]
 800570e:	4603      	mov	r3, r0
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	4413      	add	r3, r2
 8005714:	b2c9      	uxtb	r1, r1
 8005716:	4a05      	ldr	r2, [pc, #20]	; (800572c <ssd1306_DrawPixel+0xbc>)
 8005718:	54d1      	strb	r1, [r2, r3]
 800571a:	e000      	b.n	800571e <ssd1306_DrawPixel+0xae>
		return;
 800571c:	bf00      	nop
	}
}
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	200004c8 	.word	0x200004c8
 800572c:	200000c8 	.word	0x200000c8

08005730 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	4604      	mov	r4, r0
 8005738:	1d38      	adds	r0, r7, #4
 800573a:	e880 0006 	stmia.w	r0, {r1, r2}
 800573e:	461a      	mov	r2, r3
 8005740:	4623      	mov	r3, r4
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	4613      	mov	r3, r2
 8005746:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005748:	4b38      	ldr	r3, [pc, #224]	; (800582c <ssd1306_WriteChar+0xfc>)
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	793b      	ldrb	r3, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	2b7f      	cmp	r3, #127	; 0x7f
 8005754:	dc06      	bgt.n	8005764 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005756:	4b35      	ldr	r3, [pc, #212]	; (800582c <ssd1306_WriteChar+0xfc>)
 8005758:	885b      	ldrh	r3, [r3, #2]
 800575a:	461a      	mov	r2, r3
 800575c:	797b      	ldrb	r3, [r7, #5]
 800575e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005760:	2b3f      	cmp	r3, #63	; 0x3f
 8005762:	dd01      	ble.n	8005768 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8005764:	2300      	movs	r3, #0
 8005766:	e05d      	b.n	8005824 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	e04c      	b.n	8005808 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	3b20      	subs	r3, #32
 8005774:	7979      	ldrb	r1, [r7, #5]
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4619      	mov	r1, r3
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	440b      	add	r3, r1
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e034      	b.n	80057f8 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d012      	beq.n	80057c4 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800579e:	4b23      	ldr	r3, [pc, #140]	; (800582c <ssd1306_WriteChar+0xfc>)
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	b2d8      	uxtb	r0, r3
 80057ac:	4b1f      	ldr	r3, [pc, #124]	; (800582c <ssd1306_WriteChar+0xfc>)
 80057ae:	885b      	ldrh	r3, [r3, #2]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	7bba      	ldrb	r2, [r7, #14]
 80057bc:	4619      	mov	r1, r3
 80057be:	f7ff ff57 	bl	8005670 <ssd1306_DrawPixel>
 80057c2:	e016      	b.n	80057f2 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <ssd1306_WriteChar+0xfc>)
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	b2d8      	uxtb	r0, r3
 80057d2:	4b16      	ldr	r3, [pc, #88]	; (800582c <ssd1306_WriteChar+0xfc>)
 80057d4:	885b      	ldrh	r3, [r3, #2]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	4413      	add	r3, r2
 80057de:	b2d9      	uxtb	r1, r3
 80057e0:	7bbb      	ldrb	r3, [r7, #14]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	f7ff ff3f 	bl	8005670 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	3301      	adds	r3, #1
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	793b      	ldrb	r3, [r7, #4]
 80057fa:	461a      	mov	r2, r3
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	4293      	cmp	r3, r2
 8005800:	d3c5      	bcc.n	800578e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3301      	adds	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	797b      	ldrb	r3, [r7, #5]
 800580a:	461a      	mov	r2, r3
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4293      	cmp	r3, r2
 8005810:	d3ad      	bcc.n	800576e <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <ssd1306_WriteChar+0xfc>)
 8005814:	881a      	ldrh	r2, [r3, #0]
 8005816:	793b      	ldrb	r3, [r7, #4]
 8005818:	b29b      	uxth	r3, r3
 800581a:	4413      	add	r3, r2
 800581c:	b29a      	uxth	r2, r3
 800581e:	4b03      	ldr	r3, [pc, #12]	; (800582c <ssd1306_WriteChar+0xfc>)
 8005820:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3724      	adds	r7, #36	; 0x24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd90      	pop	{r4, r7, pc}
 800582c:	200004c8 	.word	0x200004c8

08005830 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	1d38      	adds	r0, r7, #4
 800583a:	e880 0006 	stmia.w	r0, {r1, r2}
 800583e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8005840:	e012      	b.n	8005868 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	7818      	ldrb	r0, [r3, #0]
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	1d3a      	adds	r2, r7, #4
 800584a:	ca06      	ldmia	r2, {r1, r2}
 800584c:	f7ff ff70 	bl	8005730 <ssd1306_WriteChar>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d002      	beq.n	8005862 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	e008      	b.n	8005874 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e8      	bne.n	8005842 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	781b      	ldrb	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	460a      	mov	r2, r1
 8005886:	71fb      	strb	r3, [r7, #7]
 8005888:	4613      	mov	r3, r2
 800588a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	b29a      	uxth	r2, r3
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <ssd1306_SetCursor+0x2c>)
 8005892:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8005894:	79bb      	ldrb	r3, [r7, #6]
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <ssd1306_SetCursor+0x2c>)
 800589a:	805a      	strh	r2, [r3, #2]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	200004c8 	.word	0x200004c8

080058ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <HAL_MspInit+0x4c>)
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	4a0f      	ldr	r2, [pc, #60]	; (80058f8 <HAL_MspInit+0x4c>)
 80058bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058c0:	6453      	str	r3, [r2, #68]	; 0x44
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <HAL_MspInit+0x4c>)
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_MspInit+0x4c>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <HAL_MspInit+0x4c>)
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6413      	str	r3, [r2, #64]	; 0x40
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_MspInit+0x4c>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80058ea:	2007      	movs	r0, #7
 80058ec:	f7fc f8ac 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800

080058fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	f107 0314 	add.w	r3, r7, #20
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a2f      	ldr	r2, [pc, #188]	; (80059d8 <HAL_ADC_MspInit+0xdc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d157      	bne.n	80059ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <HAL_ADC_MspInit+0xe0>)
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	4a2d      	ldr	r2, [pc, #180]	; (80059dc <HAL_ADC_MspInit+0xe0>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592c:	6453      	str	r3, [r2, #68]	; 0x44
 800592e:	4b2b      	ldr	r3, [pc, #172]	; (80059dc <HAL_ADC_MspInit+0xe0>)
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	4b27      	ldr	r3, [pc, #156]	; (80059dc <HAL_ADC_MspInit+0xe0>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a26      	ldr	r2, [pc, #152]	; (80059dc <HAL_ADC_MspInit+0xe0>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	4b24      	ldr	r3, [pc, #144]	; (80059dc <HAL_ADC_MspInit+0xe0>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005956:	2301      	movs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800595a:	2303      	movs	r3, #3
 800595c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005962:	f107 0314 	add.w	r3, r7, #20
 8005966:	4619      	mov	r1, r3
 8005968:	481d      	ldr	r0, [pc, #116]	; (80059e0 <HAL_ADC_MspInit+0xe4>)
 800596a:	f7fc fc25 	bl	80021b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 8005970:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <HAL_ADC_MspInit+0xec>)
 8005972:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005974:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800597a:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 800597c:	2200      	movs	r2, #0
 800597e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005980:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 8005988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800598c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 8005990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005994:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 8005998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800599c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 80059a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80059b2:	480c      	ldr	r0, [pc, #48]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 80059b4:	f7fc f88a 	bl	8001acc <HAL_DMA_Init>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80059be:	f7ff fd79 	bl	80054b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
 80059c8:	4a06      	ldr	r2, [pc, #24]	; (80059e4 <HAL_ADC_MspInit+0xe8>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80059ce:	bf00      	nop
 80059d0:	3728      	adds	r7, #40	; 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40012000 	.word	0x40012000
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40020000 	.word	0x40020000
 80059e4:	20000584 	.word	0x20000584
 80059e8:	40026410 	.word	0x40026410

080059ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <HAL_I2C_MspInit+0x84>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d12c      	bne.n	8005a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <HAL_I2C_MspInit+0x88>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <HAL_I2C_MspInit+0x88>)
 8005a18:	f043 0302 	orr.w	r3, r3, #2
 8005a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <HAL_I2C_MspInit+0x88>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a30:	2312      	movs	r3, #18
 8005a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a34:	2301      	movs	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	4619      	mov	r1, r3
 8005a46:	480c      	ldr	r0, [pc, #48]	; (8005a78 <HAL_I2C_MspInit+0x8c>)
 8005a48:	f7fc fbb6 	bl	80021b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <HAL_I2C_MspInit+0x88>)
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <HAL_I2C_MspInit+0x88>)
 8005a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_I2C_MspInit+0x88>)
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005a68:	bf00      	nop
 8005a6a:	3728      	adds	r7, #40	; 0x28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40005400 	.word	0x40005400
 8005a74:	40023800 	.word	0x40023800
 8005a78:	40020400 	.word	0x40020400

08005a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8c:	d115      	bne.n	8005aba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <HAL_TIM_Base_MspInit+0x48>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	4a0b      	ldr	r2, [pc, #44]	; (8005ac4 <HAL_TIM_Base_MspInit+0x48>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9e:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <HAL_TIM_Base_MspInit+0x48>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2100      	movs	r1, #0
 8005aae:	201c      	movs	r0, #28
 8005ab0:	f7fb ffd5 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ab4:	201c      	movs	r0, #28
 8005ab6:	f7fb ffee 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023800 	.word	0x40023800

08005ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a19      	ldr	r2, [pc, #100]	; (8005b4c <HAL_UART_MspInit+0x84>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d12b      	bne.n	8005b42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <HAL_UART_MspInit+0x88>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <HAL_UART_MspInit+0x88>)
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af8:	6413      	str	r3, [r2, #64]	; 0x40
 8005afa:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <HAL_UART_MspInit+0x88>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <HAL_UART_MspInit+0x88>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <HAL_UART_MspInit+0x88>)
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	6313      	str	r3, [r2, #48]	; 0x30
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <HAL_UART_MspInit+0x88>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005b22:	230c      	movs	r3, #12
 8005b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b26:	2302      	movs	r3, #2
 8005b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b32:	2307      	movs	r3, #7
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4805      	ldr	r0, [pc, #20]	; (8005b54 <HAL_UART_MspInit+0x8c>)
 8005b3e:	f7fc fb3b 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005b42:	bf00      	nop
 8005b44:	3728      	adds	r7, #40	; 0x28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40004400 	.word	0x40004400
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40020000 	.word	0x40020000

08005b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b6a:	e7fe      	b.n	8005b6a <HardFault_Handler+0x4>

08005b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b70:	e7fe      	b.n	8005b70 <MemManage_Handler+0x4>

08005b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b76:	e7fe      	b.n	8005b76 <BusFault_Handler+0x4>

08005b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b7c:	e7fe      	b.n	8005b7c <UsageFault_Handler+0x4>

08005b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bac:	f7fb fa36 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005bb8:	4802      	ldr	r0, [pc, #8]	; (8005bc4 <TIM2_IRQHandler+0x10>)
 8005bba:	f7fd fe7f 	bl	80038bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005bbe:	bf00      	nop
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200005e4 	.word	0x200005e4

08005bc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005bcc:	4802      	ldr	r0, [pc, #8]	; (8005bd8 <DMA2_Stream0_IRQHandler+0x10>)
 8005bce:	f7fc f88b 	bl	8001ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000584 	.word	0x20000584

08005bdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <_sbrk+0x50>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <_sbrk+0x16>
		heap_end = &end;
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <_sbrk+0x50>)
 8005bee:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <_sbrk+0x54>)
 8005bf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <_sbrk+0x50>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <_sbrk+0x50>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	466a      	mov	r2, sp
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d907      	bls.n	8005c16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005c06:	f000 f875 	bl	8005cf4 <__errno>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	230c      	movs	r3, #12
 8005c0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	e006      	b.n	8005c24 <_sbrk+0x48>
	}

	heap_end += incr;
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <_sbrk+0x50>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4a03      	ldr	r2, [pc, #12]	; (8005c2c <_sbrk+0x50>)
 8005c20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005c22:	68fb      	ldr	r3, [r7, #12]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	200004d0 	.word	0x200004d0
 8005c30:	20000670 	.word	0x20000670

08005c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c38:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <SystemInit+0x60>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <SystemInit+0x60>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <SystemInit+0x64>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <SystemInit+0x64>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <SystemInit+0x64>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c5a:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <SystemInit+0x64>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <SystemInit+0x64>)
 8005c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <SystemInit+0x64>)
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <SystemInit+0x68>)
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <SystemInit+0x64>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <SystemInit+0x64>)
 8005c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <SystemInit+0x64>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <SystemInit+0x60>)
 8005c84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c88:	609a      	str	r2, [r3, #8]
#endif
}
 8005c8a:	bf00      	nop
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	e000ed00 	.word	0xe000ed00
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	24003010 	.word	0x24003010

08005ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ca6:	e003      	b.n	8005cb0 <LoopCopyDataInit>

08005ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cae:	3104      	adds	r1, #4

08005cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005cb0:	480b      	ldr	r0, [pc, #44]	; (8005ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cb8:	d3f6      	bcc.n	8005ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8005cba:	4a0b      	ldr	r2, [pc, #44]	; (8005ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cbc:	e002      	b.n	8005cc4 <LoopFillZerobss>

08005cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005cc0:	f842 3b04 	str.w	r3, [r2], #4

08005cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cc8:	d3f9      	bcc.n	8005cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cca:	f7ff ffb3 	bl	8005c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cce:	f000 f817 	bl	8005d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cd2:	f7fe fca9 	bl	8004628 <main>
  bx  lr    
 8005cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005cdc:	08007f10 	.word	0x08007f10
  ldr  r0, =_sdata
 8005ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005ce4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8005ce8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8005cec:	2000066c 	.word	0x2000066c

08005cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005cf0:	e7fe      	b.n	8005cf0 <ADC_IRQHandler>
	...

08005cf4 <__errno>:
 8005cf4:	4b01      	ldr	r3, [pc, #4]	; (8005cfc <__errno+0x8>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000020 	.word	0x20000020

08005d00 <__libc_init_array>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4e0d      	ldr	r6, [pc, #52]	; (8005d38 <__libc_init_array+0x38>)
 8005d04:	4c0d      	ldr	r4, [pc, #52]	; (8005d3c <__libc_init_array+0x3c>)
 8005d06:	1ba4      	subs	r4, r4, r6
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	42a5      	cmp	r5, r4
 8005d0e:	d109      	bne.n	8005d24 <__libc_init_array+0x24>
 8005d10:	4e0b      	ldr	r6, [pc, #44]	; (8005d40 <__libc_init_array+0x40>)
 8005d12:	4c0c      	ldr	r4, [pc, #48]	; (8005d44 <__libc_init_array+0x44>)
 8005d14:	f001 fc7e 	bl	8007614 <_init>
 8005d18:	1ba4      	subs	r4, r4, r6
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	2500      	movs	r5, #0
 8005d1e:	42a5      	cmp	r5, r4
 8005d20:	d105      	bne.n	8005d2e <__libc_init_array+0x2e>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d28:	4798      	blx	r3
 8005d2a:	3501      	adds	r5, #1
 8005d2c:	e7ee      	b.n	8005d0c <__libc_init_array+0xc>
 8005d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d32:	4798      	blx	r3
 8005d34:	3501      	adds	r5, #1
 8005d36:	e7f2      	b.n	8005d1e <__libc_init_array+0x1e>
 8005d38:	08007f08 	.word	0x08007f08
 8005d3c:	08007f08 	.word	0x08007f08
 8005d40:	08007f08 	.word	0x08007f08
 8005d44:	08007f0c 	.word	0x08007f0c

08005d48 <memset>:
 8005d48:	4402      	add	r2, r0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d100      	bne.n	8005d52 <memset+0xa>
 8005d50:	4770      	bx	lr
 8005d52:	f803 1b01 	strb.w	r1, [r3], #1
 8005d56:	e7f9      	b.n	8005d4c <memset+0x4>

08005d58 <siprintf>:
 8005d58:	b40e      	push	{r1, r2, r3}
 8005d5a:	b500      	push	{lr}
 8005d5c:	b09c      	sub	sp, #112	; 0x70
 8005d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d60:	9002      	str	r0, [sp, #8]
 8005d62:	9006      	str	r0, [sp, #24]
 8005d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d68:	4809      	ldr	r0, [pc, #36]	; (8005d90 <siprintf+0x38>)
 8005d6a:	9107      	str	r1, [sp, #28]
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	4909      	ldr	r1, [pc, #36]	; (8005d94 <siprintf+0x3c>)
 8005d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	6800      	ldr	r0, [r0, #0]
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	a902      	add	r1, sp, #8
 8005d7c:	f000 f866 	bl	8005e4c <_svfiprintf_r>
 8005d80:	9b02      	ldr	r3, [sp, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	b01c      	add	sp, #112	; 0x70
 8005d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d8c:	b003      	add	sp, #12
 8005d8e:	4770      	bx	lr
 8005d90:	20000020 	.word	0x20000020
 8005d94:	ffff0208 	.word	0xffff0208

08005d98 <__ssputs_r>:
 8005d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9c:	688e      	ldr	r6, [r1, #8]
 8005d9e:	429e      	cmp	r6, r3
 8005da0:	4682      	mov	sl, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	4690      	mov	r8, r2
 8005da6:	4699      	mov	r9, r3
 8005da8:	d837      	bhi.n	8005e1a <__ssputs_r+0x82>
 8005daa:	898a      	ldrh	r2, [r1, #12]
 8005dac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005db0:	d031      	beq.n	8005e16 <__ssputs_r+0x7e>
 8005db2:	6825      	ldr	r5, [r4, #0]
 8005db4:	6909      	ldr	r1, [r1, #16]
 8005db6:	1a6f      	subs	r7, r5, r1
 8005db8:	6965      	ldr	r5, [r4, #20]
 8005dba:	2302      	movs	r3, #2
 8005dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005dc4:	f109 0301 	add.w	r3, r9, #1
 8005dc8:	443b      	add	r3, r7
 8005dca:	429d      	cmp	r5, r3
 8005dcc:	bf38      	it	cc
 8005dce:	461d      	movcc	r5, r3
 8005dd0:	0553      	lsls	r3, r2, #21
 8005dd2:	d530      	bpl.n	8005e36 <__ssputs_r+0x9e>
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f000 fb2b 	bl	8006430 <_malloc_r>
 8005dda:	4606      	mov	r6, r0
 8005ddc:	b950      	cbnz	r0, 8005df4 <__ssputs_r+0x5c>
 8005dde:	230c      	movs	r3, #12
 8005de0:	f8ca 3000 	str.w	r3, [sl]
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	463a      	mov	r2, r7
 8005df6:	6921      	ldr	r1, [r4, #16]
 8005df8:	f000 faa8 	bl	800634c <memcpy>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	6126      	str	r6, [r4, #16]
 8005e0a:	6165      	str	r5, [r4, #20]
 8005e0c:	443e      	add	r6, r7
 8005e0e:	1bed      	subs	r5, r5, r7
 8005e10:	6026      	str	r6, [r4, #0]
 8005e12:	60a5      	str	r5, [r4, #8]
 8005e14:	464e      	mov	r6, r9
 8005e16:	454e      	cmp	r6, r9
 8005e18:	d900      	bls.n	8005e1c <__ssputs_r+0x84>
 8005e1a:	464e      	mov	r6, r9
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4641      	mov	r1, r8
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	f000 fa9e 	bl	8006362 <memmove>
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	1b9b      	subs	r3, r3, r6
 8005e2a:	60a3      	str	r3, [r4, #8]
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	441e      	add	r6, r3
 8005e30:	6026      	str	r6, [r4, #0]
 8005e32:	2000      	movs	r0, #0
 8005e34:	e7dc      	b.n	8005df0 <__ssputs_r+0x58>
 8005e36:	462a      	mov	r2, r5
 8005e38:	f000 fb54 	bl	80064e4 <_realloc_r>
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d1e2      	bne.n	8005e08 <__ssputs_r+0x70>
 8005e42:	6921      	ldr	r1, [r4, #16]
 8005e44:	4650      	mov	r0, sl
 8005e46:	f000 faa5 	bl	8006394 <_free_r>
 8005e4a:	e7c8      	b.n	8005dde <__ssputs_r+0x46>

08005e4c <_svfiprintf_r>:
 8005e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	461d      	mov	r5, r3
 8005e52:	898b      	ldrh	r3, [r1, #12]
 8005e54:	061f      	lsls	r7, r3, #24
 8005e56:	b09d      	sub	sp, #116	; 0x74
 8005e58:	4680      	mov	r8, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	d50f      	bpl.n	8005e80 <_svfiprintf_r+0x34>
 8005e60:	690b      	ldr	r3, [r1, #16]
 8005e62:	b96b      	cbnz	r3, 8005e80 <_svfiprintf_r+0x34>
 8005e64:	2140      	movs	r1, #64	; 0x40
 8005e66:	f000 fae3 	bl	8006430 <_malloc_r>
 8005e6a:	6020      	str	r0, [r4, #0]
 8005e6c:	6120      	str	r0, [r4, #16]
 8005e6e:	b928      	cbnz	r0, 8005e7c <_svfiprintf_r+0x30>
 8005e70:	230c      	movs	r3, #12
 8005e72:	f8c8 3000 	str.w	r3, [r8]
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	e0c8      	b.n	800600e <_svfiprintf_r+0x1c2>
 8005e7c:	2340      	movs	r3, #64	; 0x40
 8005e7e:	6163      	str	r3, [r4, #20]
 8005e80:	2300      	movs	r3, #0
 8005e82:	9309      	str	r3, [sp, #36]	; 0x24
 8005e84:	2320      	movs	r3, #32
 8005e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e8a:	2330      	movs	r3, #48	; 0x30
 8005e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e90:	9503      	str	r5, [sp, #12]
 8005e92:	f04f 0b01 	mov.w	fp, #1
 8005e96:	4637      	mov	r7, r6
 8005e98:	463d      	mov	r5, r7
 8005e9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e9e:	b10b      	cbz	r3, 8005ea4 <_svfiprintf_r+0x58>
 8005ea0:	2b25      	cmp	r3, #37	; 0x25
 8005ea2:	d13e      	bne.n	8005f22 <_svfiprintf_r+0xd6>
 8005ea4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ea8:	d00b      	beq.n	8005ec2 <_svfiprintf_r+0x76>
 8005eaa:	4653      	mov	r3, sl
 8005eac:	4632      	mov	r2, r6
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	f7ff ff71 	bl	8005d98 <__ssputs_r>
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f000 80a4 	beq.w	8006004 <_svfiprintf_r+0x1b8>
 8005ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ebe:	4453      	add	r3, sl
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	783b      	ldrb	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 809d 	beq.w	8006004 <_svfiprintf_r+0x1b8>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	9307      	str	r3, [sp, #28]
 8005ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005edc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ede:	462f      	mov	r7, r5
 8005ee0:	2205      	movs	r2, #5
 8005ee2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005ee6:	4850      	ldr	r0, [pc, #320]	; (8006028 <_svfiprintf_r+0x1dc>)
 8005ee8:	f7fa f992 	bl	8000210 <memchr>
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	b9d0      	cbnz	r0, 8005f26 <_svfiprintf_r+0xda>
 8005ef0:	06d9      	lsls	r1, r3, #27
 8005ef2:	bf44      	itt	mi
 8005ef4:	2220      	movmi	r2, #32
 8005ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005efa:	071a      	lsls	r2, r3, #28
 8005efc:	bf44      	itt	mi
 8005efe:	222b      	movmi	r2, #43	; 0x2b
 8005f00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f04:	782a      	ldrb	r2, [r5, #0]
 8005f06:	2a2a      	cmp	r2, #42	; 0x2a
 8005f08:	d015      	beq.n	8005f36 <_svfiprintf_r+0xea>
 8005f0a:	9a07      	ldr	r2, [sp, #28]
 8005f0c:	462f      	mov	r7, r5
 8005f0e:	2000      	movs	r0, #0
 8005f10:	250a      	movs	r5, #10
 8005f12:	4639      	mov	r1, r7
 8005f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f18:	3b30      	subs	r3, #48	; 0x30
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d94d      	bls.n	8005fba <_svfiprintf_r+0x16e>
 8005f1e:	b1b8      	cbz	r0, 8005f50 <_svfiprintf_r+0x104>
 8005f20:	e00f      	b.n	8005f42 <_svfiprintf_r+0xf6>
 8005f22:	462f      	mov	r7, r5
 8005f24:	e7b8      	b.n	8005e98 <_svfiprintf_r+0x4c>
 8005f26:	4a40      	ldr	r2, [pc, #256]	; (8006028 <_svfiprintf_r+0x1dc>)
 8005f28:	1a80      	subs	r0, r0, r2
 8005f2a:	fa0b f000 	lsl.w	r0, fp, r0
 8005f2e:	4318      	orrs	r0, r3
 8005f30:	9004      	str	r0, [sp, #16]
 8005f32:	463d      	mov	r5, r7
 8005f34:	e7d3      	b.n	8005ede <_svfiprintf_r+0x92>
 8005f36:	9a03      	ldr	r2, [sp, #12]
 8005f38:	1d11      	adds	r1, r2, #4
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	9103      	str	r1, [sp, #12]
 8005f3e:	2a00      	cmp	r2, #0
 8005f40:	db01      	blt.n	8005f46 <_svfiprintf_r+0xfa>
 8005f42:	9207      	str	r2, [sp, #28]
 8005f44:	e004      	b.n	8005f50 <_svfiprintf_r+0x104>
 8005f46:	4252      	negs	r2, r2
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	9207      	str	r2, [sp, #28]
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	783b      	ldrb	r3, [r7, #0]
 8005f52:	2b2e      	cmp	r3, #46	; 0x2e
 8005f54:	d10c      	bne.n	8005f70 <_svfiprintf_r+0x124>
 8005f56:	787b      	ldrb	r3, [r7, #1]
 8005f58:	2b2a      	cmp	r3, #42	; 0x2a
 8005f5a:	d133      	bne.n	8005fc4 <_svfiprintf_r+0x178>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	9203      	str	r2, [sp, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bfb8      	it	lt
 8005f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f6c:	3702      	adds	r7, #2
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	4d2e      	ldr	r5, [pc, #184]	; (800602c <_svfiprintf_r+0x1e0>)
 8005f72:	7839      	ldrb	r1, [r7, #0]
 8005f74:	2203      	movs	r2, #3
 8005f76:	4628      	mov	r0, r5
 8005f78:	f7fa f94a 	bl	8000210 <memchr>
 8005f7c:	b138      	cbz	r0, 8005f8e <_svfiprintf_r+0x142>
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	1b40      	subs	r0, r0, r5
 8005f82:	fa03 f000 	lsl.w	r0, r3, r0
 8005f86:	9b04      	ldr	r3, [sp, #16]
 8005f88:	4303      	orrs	r3, r0
 8005f8a:	3701      	adds	r7, #1
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	7839      	ldrb	r1, [r7, #0]
 8005f90:	4827      	ldr	r0, [pc, #156]	; (8006030 <_svfiprintf_r+0x1e4>)
 8005f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f96:	2206      	movs	r2, #6
 8005f98:	1c7e      	adds	r6, r7, #1
 8005f9a:	f7fa f939 	bl	8000210 <memchr>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d038      	beq.n	8006014 <_svfiprintf_r+0x1c8>
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <_svfiprintf_r+0x1e8>)
 8005fa4:	bb13      	cbnz	r3, 8005fec <_svfiprintf_r+0x1a0>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	f023 0307 	bic.w	r3, r3, #7
 8005fae:	3308      	adds	r3, #8
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb4:	444b      	add	r3, r9
 8005fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb8:	e76d      	b.n	8005e96 <_svfiprintf_r+0x4a>
 8005fba:	fb05 3202 	mla	r2, r5, r2, r3
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	e7a6      	b.n	8005f12 <_svfiprintf_r+0xc6>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	3701      	adds	r7, #1
 8005fc8:	9305      	str	r3, [sp, #20]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	250a      	movs	r5, #10
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd4:	3a30      	subs	r2, #48	; 0x30
 8005fd6:	2a09      	cmp	r2, #9
 8005fd8:	d903      	bls.n	8005fe2 <_svfiprintf_r+0x196>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0c8      	beq.n	8005f70 <_svfiprintf_r+0x124>
 8005fde:	9105      	str	r1, [sp, #20]
 8005fe0:	e7c6      	b.n	8005f70 <_svfiprintf_r+0x124>
 8005fe2:	fb05 2101 	mla	r1, r5, r1, r2
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4607      	mov	r7, r0
 8005fea:	e7f0      	b.n	8005fce <_svfiprintf_r+0x182>
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_svfiprintf_r+0x1ec>)
 8005ff4:	a904      	add	r1, sp, #16
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f3af 8000 	nop.w
 8005ffc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006000:	4681      	mov	r9, r0
 8006002:	d1d6      	bne.n	8005fb2 <_svfiprintf_r+0x166>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	065b      	lsls	r3, r3, #25
 8006008:	f53f af35 	bmi.w	8005e76 <_svfiprintf_r+0x2a>
 800600c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800600e:	b01d      	add	sp, #116	; 0x74
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4622      	mov	r2, r4
 800601a:	4b07      	ldr	r3, [pc, #28]	; (8006038 <_svfiprintf_r+0x1ec>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4640      	mov	r0, r8
 8006020:	f000 f882 	bl	8006128 <_printf_i>
 8006024:	e7ea      	b.n	8005ffc <_svfiprintf_r+0x1b0>
 8006026:	bf00      	nop
 8006028:	08007e88 	.word	0x08007e88
 800602c:	08007e8e 	.word	0x08007e8e
 8006030:	08007e92 	.word	0x08007e92
 8006034:	00000000 	.word	0x00000000
 8006038:	08005d99 	.word	0x08005d99

0800603c <_printf_common>:
 800603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006040:	4691      	mov	r9, r2
 8006042:	461f      	mov	r7, r3
 8006044:	688a      	ldr	r2, [r1, #8]
 8006046:	690b      	ldr	r3, [r1, #16]
 8006048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800604c:	4293      	cmp	r3, r2
 800604e:	bfb8      	it	lt
 8006050:	4613      	movlt	r3, r2
 8006052:	f8c9 3000 	str.w	r3, [r9]
 8006056:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800605a:	4606      	mov	r6, r0
 800605c:	460c      	mov	r4, r1
 800605e:	b112      	cbz	r2, 8006066 <_printf_common+0x2a>
 8006060:	3301      	adds	r3, #1
 8006062:	f8c9 3000 	str.w	r3, [r9]
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	0699      	lsls	r1, r3, #26
 800606a:	bf42      	ittt	mi
 800606c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006070:	3302      	addmi	r3, #2
 8006072:	f8c9 3000 	strmi.w	r3, [r9]
 8006076:	6825      	ldr	r5, [r4, #0]
 8006078:	f015 0506 	ands.w	r5, r5, #6
 800607c:	d107      	bne.n	800608e <_printf_common+0x52>
 800607e:	f104 0a19 	add.w	sl, r4, #25
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	f8d9 2000 	ldr.w	r2, [r9]
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	42ab      	cmp	r3, r5
 800608c:	dc28      	bgt.n	80060e0 <_printf_common+0xa4>
 800608e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	3300      	adds	r3, #0
 8006096:	bf18      	it	ne
 8006098:	2301      	movne	r3, #1
 800609a:	0692      	lsls	r2, r2, #26
 800609c:	d42d      	bmi.n	80060fa <_printf_common+0xbe>
 800609e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a2:	4639      	mov	r1, r7
 80060a4:	4630      	mov	r0, r6
 80060a6:	47c0      	blx	r8
 80060a8:	3001      	adds	r0, #1
 80060aa:	d020      	beq.n	80060ee <_printf_common+0xb2>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	68e5      	ldr	r5, [r4, #12]
 80060b0:	f8d9 2000 	ldr.w	r2, [r9]
 80060b4:	f003 0306 	and.w	r3, r3, #6
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	bf08      	it	eq
 80060bc:	1aad      	subeq	r5, r5, r2
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	bf0c      	ite	eq
 80060c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c8:	2500      	movne	r5, #0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bfc4      	itt	gt
 80060ce:	1a9b      	subgt	r3, r3, r2
 80060d0:	18ed      	addgt	r5, r5, r3
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	341a      	adds	r4, #26
 80060d8:	454d      	cmp	r5, r9
 80060da:	d11a      	bne.n	8006112 <_printf_common+0xd6>
 80060dc:	2000      	movs	r0, #0
 80060de:	e008      	b.n	80060f2 <_printf_common+0xb6>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4652      	mov	r2, sl
 80060e4:	4639      	mov	r1, r7
 80060e6:	4630      	mov	r0, r6
 80060e8:	47c0      	blx	r8
 80060ea:	3001      	adds	r0, #1
 80060ec:	d103      	bne.n	80060f6 <_printf_common+0xba>
 80060ee:	f04f 30ff 	mov.w	r0, #4294967295
 80060f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f6:	3501      	adds	r5, #1
 80060f8:	e7c3      	b.n	8006082 <_printf_common+0x46>
 80060fa:	18e1      	adds	r1, r4, r3
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	2030      	movs	r0, #48	; 0x30
 8006100:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006104:	4422      	add	r2, r4
 8006106:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800610a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610e:	3302      	adds	r3, #2
 8006110:	e7c5      	b.n	800609e <_printf_common+0x62>
 8006112:	2301      	movs	r3, #1
 8006114:	4622      	mov	r2, r4
 8006116:	4639      	mov	r1, r7
 8006118:	4630      	mov	r0, r6
 800611a:	47c0      	blx	r8
 800611c:	3001      	adds	r0, #1
 800611e:	d0e6      	beq.n	80060ee <_printf_common+0xb2>
 8006120:	f109 0901 	add.w	r9, r9, #1
 8006124:	e7d8      	b.n	80060d8 <_printf_common+0x9c>
	...

08006128 <_printf_i>:
 8006128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800612c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006130:	460c      	mov	r4, r1
 8006132:	7e09      	ldrb	r1, [r1, #24]
 8006134:	b085      	sub	sp, #20
 8006136:	296e      	cmp	r1, #110	; 0x6e
 8006138:	4617      	mov	r7, r2
 800613a:	4606      	mov	r6, r0
 800613c:	4698      	mov	r8, r3
 800613e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006140:	f000 80b3 	beq.w	80062aa <_printf_i+0x182>
 8006144:	d822      	bhi.n	800618c <_printf_i+0x64>
 8006146:	2963      	cmp	r1, #99	; 0x63
 8006148:	d036      	beq.n	80061b8 <_printf_i+0x90>
 800614a:	d80a      	bhi.n	8006162 <_printf_i+0x3a>
 800614c:	2900      	cmp	r1, #0
 800614e:	f000 80b9 	beq.w	80062c4 <_printf_i+0x19c>
 8006152:	2958      	cmp	r1, #88	; 0x58
 8006154:	f000 8083 	beq.w	800625e <_printf_i+0x136>
 8006158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800615c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006160:	e032      	b.n	80061c8 <_printf_i+0xa0>
 8006162:	2964      	cmp	r1, #100	; 0x64
 8006164:	d001      	beq.n	800616a <_printf_i+0x42>
 8006166:	2969      	cmp	r1, #105	; 0x69
 8006168:	d1f6      	bne.n	8006158 <_printf_i+0x30>
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	6813      	ldr	r3, [r2, #0]
 800616e:	0605      	lsls	r5, r0, #24
 8006170:	f103 0104 	add.w	r1, r3, #4
 8006174:	d52a      	bpl.n	80061cc <_printf_i+0xa4>
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	da03      	bge.n	8006186 <_printf_i+0x5e>
 800617e:	222d      	movs	r2, #45	; 0x2d
 8006180:	425b      	negs	r3, r3
 8006182:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006186:	486f      	ldr	r0, [pc, #444]	; (8006344 <_printf_i+0x21c>)
 8006188:	220a      	movs	r2, #10
 800618a:	e039      	b.n	8006200 <_printf_i+0xd8>
 800618c:	2973      	cmp	r1, #115	; 0x73
 800618e:	f000 809d 	beq.w	80062cc <_printf_i+0x1a4>
 8006192:	d808      	bhi.n	80061a6 <_printf_i+0x7e>
 8006194:	296f      	cmp	r1, #111	; 0x6f
 8006196:	d020      	beq.n	80061da <_printf_i+0xb2>
 8006198:	2970      	cmp	r1, #112	; 0x70
 800619a:	d1dd      	bne.n	8006158 <_printf_i+0x30>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	f043 0320 	orr.w	r3, r3, #32
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	e003      	b.n	80061ae <_printf_i+0x86>
 80061a6:	2975      	cmp	r1, #117	; 0x75
 80061a8:	d017      	beq.n	80061da <_printf_i+0xb2>
 80061aa:	2978      	cmp	r1, #120	; 0x78
 80061ac:	d1d4      	bne.n	8006158 <_printf_i+0x30>
 80061ae:	2378      	movs	r3, #120	; 0x78
 80061b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061b4:	4864      	ldr	r0, [pc, #400]	; (8006348 <_printf_i+0x220>)
 80061b6:	e055      	b.n	8006264 <_printf_i+0x13c>
 80061b8:	6813      	ldr	r3, [r2, #0]
 80061ba:	1d19      	adds	r1, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6011      	str	r1, [r2, #0]
 80061c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061c8:	2301      	movs	r3, #1
 80061ca:	e08c      	b.n	80062e6 <_printf_i+0x1be>
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6011      	str	r1, [r2, #0]
 80061d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d4:	bf18      	it	ne
 80061d6:	b21b      	sxthne	r3, r3
 80061d8:	e7cf      	b.n	800617a <_printf_i+0x52>
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	6825      	ldr	r5, [r4, #0]
 80061de:	1d18      	adds	r0, r3, #4
 80061e0:	6010      	str	r0, [r2, #0]
 80061e2:	0628      	lsls	r0, r5, #24
 80061e4:	d501      	bpl.n	80061ea <_printf_i+0xc2>
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	e002      	b.n	80061f0 <_printf_i+0xc8>
 80061ea:	0668      	lsls	r0, r5, #25
 80061ec:	d5fb      	bpl.n	80061e6 <_printf_i+0xbe>
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	4854      	ldr	r0, [pc, #336]	; (8006344 <_printf_i+0x21c>)
 80061f2:	296f      	cmp	r1, #111	; 0x6f
 80061f4:	bf14      	ite	ne
 80061f6:	220a      	movne	r2, #10
 80061f8:	2208      	moveq	r2, #8
 80061fa:	2100      	movs	r1, #0
 80061fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006200:	6865      	ldr	r5, [r4, #4]
 8006202:	60a5      	str	r5, [r4, #8]
 8006204:	2d00      	cmp	r5, #0
 8006206:	f2c0 8095 	blt.w	8006334 <_printf_i+0x20c>
 800620a:	6821      	ldr	r1, [r4, #0]
 800620c:	f021 0104 	bic.w	r1, r1, #4
 8006210:	6021      	str	r1, [r4, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d13d      	bne.n	8006292 <_printf_i+0x16a>
 8006216:	2d00      	cmp	r5, #0
 8006218:	f040 808e 	bne.w	8006338 <_printf_i+0x210>
 800621c:	4665      	mov	r5, ip
 800621e:	2a08      	cmp	r2, #8
 8006220:	d10b      	bne.n	800623a <_printf_i+0x112>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	07db      	lsls	r3, r3, #31
 8006226:	d508      	bpl.n	800623a <_printf_i+0x112>
 8006228:	6923      	ldr	r3, [r4, #16]
 800622a:	6862      	ldr	r2, [r4, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	bfde      	ittt	le
 8006230:	2330      	movle	r3, #48	; 0x30
 8006232:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006236:	f105 35ff 	addle.w	r5, r5, #4294967295
 800623a:	ebac 0305 	sub.w	r3, ip, r5
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	f8cd 8000 	str.w	r8, [sp]
 8006244:	463b      	mov	r3, r7
 8006246:	aa03      	add	r2, sp, #12
 8006248:	4621      	mov	r1, r4
 800624a:	4630      	mov	r0, r6
 800624c:	f7ff fef6 	bl	800603c <_printf_common>
 8006250:	3001      	adds	r0, #1
 8006252:	d14d      	bne.n	80062f0 <_printf_i+0x1c8>
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	b005      	add	sp, #20
 800625a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800625e:	4839      	ldr	r0, [pc, #228]	; (8006344 <_printf_i+0x21c>)
 8006260:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	6821      	ldr	r1, [r4, #0]
 8006268:	1d1d      	adds	r5, r3, #4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6015      	str	r5, [r2, #0]
 800626e:	060a      	lsls	r2, r1, #24
 8006270:	d50b      	bpl.n	800628a <_printf_i+0x162>
 8006272:	07ca      	lsls	r2, r1, #31
 8006274:	bf44      	itt	mi
 8006276:	f041 0120 	orrmi.w	r1, r1, #32
 800627a:	6021      	strmi	r1, [r4, #0]
 800627c:	b91b      	cbnz	r3, 8006286 <_printf_i+0x15e>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	f022 0220 	bic.w	r2, r2, #32
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	2210      	movs	r2, #16
 8006288:	e7b7      	b.n	80061fa <_printf_i+0xd2>
 800628a:	064d      	lsls	r5, r1, #25
 800628c:	bf48      	it	mi
 800628e:	b29b      	uxthmi	r3, r3
 8006290:	e7ef      	b.n	8006272 <_printf_i+0x14a>
 8006292:	4665      	mov	r5, ip
 8006294:	fbb3 f1f2 	udiv	r1, r3, r2
 8006298:	fb02 3311 	mls	r3, r2, r1, r3
 800629c:	5cc3      	ldrb	r3, [r0, r3]
 800629e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062a2:	460b      	mov	r3, r1
 80062a4:	2900      	cmp	r1, #0
 80062a6:	d1f5      	bne.n	8006294 <_printf_i+0x16c>
 80062a8:	e7b9      	b.n	800621e <_printf_i+0xf6>
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	6825      	ldr	r5, [r4, #0]
 80062ae:	6961      	ldr	r1, [r4, #20]
 80062b0:	1d18      	adds	r0, r3, #4
 80062b2:	6010      	str	r0, [r2, #0]
 80062b4:	0628      	lsls	r0, r5, #24
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	d501      	bpl.n	80062be <_printf_i+0x196>
 80062ba:	6019      	str	r1, [r3, #0]
 80062bc:	e002      	b.n	80062c4 <_printf_i+0x19c>
 80062be:	066a      	lsls	r2, r5, #25
 80062c0:	d5fb      	bpl.n	80062ba <_printf_i+0x192>
 80062c2:	8019      	strh	r1, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	4665      	mov	r5, ip
 80062ca:	e7b9      	b.n	8006240 <_printf_i+0x118>
 80062cc:	6813      	ldr	r3, [r2, #0]
 80062ce:	1d19      	adds	r1, r3, #4
 80062d0:	6011      	str	r1, [r2, #0]
 80062d2:	681d      	ldr	r5, [r3, #0]
 80062d4:	6862      	ldr	r2, [r4, #4]
 80062d6:	2100      	movs	r1, #0
 80062d8:	4628      	mov	r0, r5
 80062da:	f7f9 ff99 	bl	8000210 <memchr>
 80062de:	b108      	cbz	r0, 80062e4 <_printf_i+0x1bc>
 80062e0:	1b40      	subs	r0, r0, r5
 80062e2:	6060      	str	r0, [r4, #4]
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	2300      	movs	r3, #0
 80062ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ee:	e7a7      	b.n	8006240 <_printf_i+0x118>
 80062f0:	6923      	ldr	r3, [r4, #16]
 80062f2:	462a      	mov	r2, r5
 80062f4:	4639      	mov	r1, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	47c0      	blx	r8
 80062fa:	3001      	adds	r0, #1
 80062fc:	d0aa      	beq.n	8006254 <_printf_i+0x12c>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	079b      	lsls	r3, r3, #30
 8006302:	d413      	bmi.n	800632c <_printf_i+0x204>
 8006304:	68e0      	ldr	r0, [r4, #12]
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	4298      	cmp	r0, r3
 800630a:	bfb8      	it	lt
 800630c:	4618      	movlt	r0, r3
 800630e:	e7a3      	b.n	8006258 <_printf_i+0x130>
 8006310:	2301      	movs	r3, #1
 8006312:	464a      	mov	r2, r9
 8006314:	4639      	mov	r1, r7
 8006316:	4630      	mov	r0, r6
 8006318:	47c0      	blx	r8
 800631a:	3001      	adds	r0, #1
 800631c:	d09a      	beq.n	8006254 <_printf_i+0x12c>
 800631e:	3501      	adds	r5, #1
 8006320:	68e3      	ldr	r3, [r4, #12]
 8006322:	9a03      	ldr	r2, [sp, #12]
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	42ab      	cmp	r3, r5
 8006328:	dcf2      	bgt.n	8006310 <_printf_i+0x1e8>
 800632a:	e7eb      	b.n	8006304 <_printf_i+0x1dc>
 800632c:	2500      	movs	r5, #0
 800632e:	f104 0919 	add.w	r9, r4, #25
 8006332:	e7f5      	b.n	8006320 <_printf_i+0x1f8>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1ac      	bne.n	8006292 <_printf_i+0x16a>
 8006338:	7803      	ldrb	r3, [r0, #0]
 800633a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800633e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006342:	e76c      	b.n	800621e <_printf_i+0xf6>
 8006344:	08007e99 	.word	0x08007e99
 8006348:	08007eaa 	.word	0x08007eaa

0800634c <memcpy>:
 800634c:	b510      	push	{r4, lr}
 800634e:	1e43      	subs	r3, r0, #1
 8006350:	440a      	add	r2, r1
 8006352:	4291      	cmp	r1, r2
 8006354:	d100      	bne.n	8006358 <memcpy+0xc>
 8006356:	bd10      	pop	{r4, pc}
 8006358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800635c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006360:	e7f7      	b.n	8006352 <memcpy+0x6>

08006362 <memmove>:
 8006362:	4288      	cmp	r0, r1
 8006364:	b510      	push	{r4, lr}
 8006366:	eb01 0302 	add.w	r3, r1, r2
 800636a:	d807      	bhi.n	800637c <memmove+0x1a>
 800636c:	1e42      	subs	r2, r0, #1
 800636e:	4299      	cmp	r1, r3
 8006370:	d00a      	beq.n	8006388 <memmove+0x26>
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	f802 4f01 	strb.w	r4, [r2, #1]!
 800637a:	e7f8      	b.n	800636e <memmove+0xc>
 800637c:	4283      	cmp	r3, r0
 800637e:	d9f5      	bls.n	800636c <memmove+0xa>
 8006380:	1881      	adds	r1, r0, r2
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	42d3      	cmn	r3, r2
 8006386:	d100      	bne.n	800638a <memmove+0x28>
 8006388:	bd10      	pop	{r4, pc}
 800638a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800638e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006392:	e7f7      	b.n	8006384 <memmove+0x22>

08006394 <_free_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4605      	mov	r5, r0
 8006398:	2900      	cmp	r1, #0
 800639a:	d045      	beq.n	8006428 <_free_r+0x94>
 800639c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a0:	1f0c      	subs	r4, r1, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bfb8      	it	lt
 80063a6:	18e4      	addlt	r4, r4, r3
 80063a8:	f000 f8d2 	bl	8006550 <__malloc_lock>
 80063ac:	4a1f      	ldr	r2, [pc, #124]	; (800642c <_free_r+0x98>)
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	4610      	mov	r0, r2
 80063b2:	b933      	cbnz	r3, 80063c2 <_free_r+0x2e>
 80063b4:	6063      	str	r3, [r4, #4]
 80063b6:	6014      	str	r4, [r2, #0]
 80063b8:	4628      	mov	r0, r5
 80063ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063be:	f000 b8c8 	b.w	8006552 <__malloc_unlock>
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	d90c      	bls.n	80063e0 <_free_r+0x4c>
 80063c6:	6821      	ldr	r1, [r4, #0]
 80063c8:	1862      	adds	r2, r4, r1
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bf04      	itt	eq
 80063ce:	681a      	ldreq	r2, [r3, #0]
 80063d0:	685b      	ldreq	r3, [r3, #4]
 80063d2:	6063      	str	r3, [r4, #4]
 80063d4:	bf04      	itt	eq
 80063d6:	1852      	addeq	r2, r2, r1
 80063d8:	6022      	streq	r2, [r4, #0]
 80063da:	6004      	str	r4, [r0, #0]
 80063dc:	e7ec      	b.n	80063b8 <_free_r+0x24>
 80063de:	4613      	mov	r3, r2
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	b10a      	cbz	r2, 80063e8 <_free_r+0x54>
 80063e4:	42a2      	cmp	r2, r4
 80063e6:	d9fa      	bls.n	80063de <_free_r+0x4a>
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	1858      	adds	r0, r3, r1
 80063ec:	42a0      	cmp	r0, r4
 80063ee:	d10b      	bne.n	8006408 <_free_r+0x74>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	4401      	add	r1, r0
 80063f4:	1858      	adds	r0, r3, r1
 80063f6:	4282      	cmp	r2, r0
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	d1dd      	bne.n	80063b8 <_free_r+0x24>
 80063fc:	6810      	ldr	r0, [r2, #0]
 80063fe:	6852      	ldr	r2, [r2, #4]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	4401      	add	r1, r0
 8006404:	6019      	str	r1, [r3, #0]
 8006406:	e7d7      	b.n	80063b8 <_free_r+0x24>
 8006408:	d902      	bls.n	8006410 <_free_r+0x7c>
 800640a:	230c      	movs	r3, #12
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	e7d3      	b.n	80063b8 <_free_r+0x24>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	1821      	adds	r1, r4, r0
 8006414:	428a      	cmp	r2, r1
 8006416:	bf04      	itt	eq
 8006418:	6811      	ldreq	r1, [r2, #0]
 800641a:	6852      	ldreq	r2, [r2, #4]
 800641c:	6062      	str	r2, [r4, #4]
 800641e:	bf04      	itt	eq
 8006420:	1809      	addeq	r1, r1, r0
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	605c      	str	r4, [r3, #4]
 8006426:	e7c7      	b.n	80063b8 <_free_r+0x24>
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	bf00      	nop
 800642c:	200004d4 	.word	0x200004d4

08006430 <_malloc_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	1ccd      	adds	r5, r1, #3
 8006434:	f025 0503 	bic.w	r5, r5, #3
 8006438:	3508      	adds	r5, #8
 800643a:	2d0c      	cmp	r5, #12
 800643c:	bf38      	it	cc
 800643e:	250c      	movcc	r5, #12
 8006440:	2d00      	cmp	r5, #0
 8006442:	4606      	mov	r6, r0
 8006444:	db01      	blt.n	800644a <_malloc_r+0x1a>
 8006446:	42a9      	cmp	r1, r5
 8006448:	d903      	bls.n	8006452 <_malloc_r+0x22>
 800644a:	230c      	movs	r3, #12
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	2000      	movs	r0, #0
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	f000 f87d 	bl	8006550 <__malloc_lock>
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <_malloc_r+0xac>)
 8006458:	6814      	ldr	r4, [r2, #0]
 800645a:	4621      	mov	r1, r4
 800645c:	b991      	cbnz	r1, 8006484 <_malloc_r+0x54>
 800645e:	4c20      	ldr	r4, [pc, #128]	; (80064e0 <_malloc_r+0xb0>)
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	b91b      	cbnz	r3, 800646c <_malloc_r+0x3c>
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f863 	bl	8006530 <_sbrk_r>
 800646a:	6020      	str	r0, [r4, #0]
 800646c:	4629      	mov	r1, r5
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f85e 	bl	8006530 <_sbrk_r>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d124      	bne.n	80064c2 <_malloc_r+0x92>
 8006478:	230c      	movs	r3, #12
 800647a:	6033      	str	r3, [r6, #0]
 800647c:	4630      	mov	r0, r6
 800647e:	f000 f868 	bl	8006552 <__malloc_unlock>
 8006482:	e7e4      	b.n	800644e <_malloc_r+0x1e>
 8006484:	680b      	ldr	r3, [r1, #0]
 8006486:	1b5b      	subs	r3, r3, r5
 8006488:	d418      	bmi.n	80064bc <_malloc_r+0x8c>
 800648a:	2b0b      	cmp	r3, #11
 800648c:	d90f      	bls.n	80064ae <_malloc_r+0x7e>
 800648e:	600b      	str	r3, [r1, #0]
 8006490:	50cd      	str	r5, [r1, r3]
 8006492:	18cc      	adds	r4, r1, r3
 8006494:	4630      	mov	r0, r6
 8006496:	f000 f85c 	bl	8006552 <__malloc_unlock>
 800649a:	f104 000b 	add.w	r0, r4, #11
 800649e:	1d23      	adds	r3, r4, #4
 80064a0:	f020 0007 	bic.w	r0, r0, #7
 80064a4:	1ac3      	subs	r3, r0, r3
 80064a6:	d0d3      	beq.n	8006450 <_malloc_r+0x20>
 80064a8:	425a      	negs	r2, r3
 80064aa:	50e2      	str	r2, [r4, r3]
 80064ac:	e7d0      	b.n	8006450 <_malloc_r+0x20>
 80064ae:	428c      	cmp	r4, r1
 80064b0:	684b      	ldr	r3, [r1, #4]
 80064b2:	bf16      	itet	ne
 80064b4:	6063      	strne	r3, [r4, #4]
 80064b6:	6013      	streq	r3, [r2, #0]
 80064b8:	460c      	movne	r4, r1
 80064ba:	e7eb      	b.n	8006494 <_malloc_r+0x64>
 80064bc:	460c      	mov	r4, r1
 80064be:	6849      	ldr	r1, [r1, #4]
 80064c0:	e7cc      	b.n	800645c <_malloc_r+0x2c>
 80064c2:	1cc4      	adds	r4, r0, #3
 80064c4:	f024 0403 	bic.w	r4, r4, #3
 80064c8:	42a0      	cmp	r0, r4
 80064ca:	d005      	beq.n	80064d8 <_malloc_r+0xa8>
 80064cc:	1a21      	subs	r1, r4, r0
 80064ce:	4630      	mov	r0, r6
 80064d0:	f000 f82e 	bl	8006530 <_sbrk_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d0cf      	beq.n	8006478 <_malloc_r+0x48>
 80064d8:	6025      	str	r5, [r4, #0]
 80064da:	e7db      	b.n	8006494 <_malloc_r+0x64>
 80064dc:	200004d4 	.word	0x200004d4
 80064e0:	200004d8 	.word	0x200004d8

080064e4 <_realloc_r>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	4607      	mov	r7, r0
 80064e8:	4614      	mov	r4, r2
 80064ea:	460e      	mov	r6, r1
 80064ec:	b921      	cbnz	r1, 80064f8 <_realloc_r+0x14>
 80064ee:	4611      	mov	r1, r2
 80064f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064f4:	f7ff bf9c 	b.w	8006430 <_malloc_r>
 80064f8:	b922      	cbnz	r2, 8006504 <_realloc_r+0x20>
 80064fa:	f7ff ff4b 	bl	8006394 <_free_r>
 80064fe:	4625      	mov	r5, r4
 8006500:	4628      	mov	r0, r5
 8006502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006504:	f000 f826 	bl	8006554 <_malloc_usable_size_r>
 8006508:	42a0      	cmp	r0, r4
 800650a:	d20f      	bcs.n	800652c <_realloc_r+0x48>
 800650c:	4621      	mov	r1, r4
 800650e:	4638      	mov	r0, r7
 8006510:	f7ff ff8e 	bl	8006430 <_malloc_r>
 8006514:	4605      	mov	r5, r0
 8006516:	2800      	cmp	r0, #0
 8006518:	d0f2      	beq.n	8006500 <_realloc_r+0x1c>
 800651a:	4631      	mov	r1, r6
 800651c:	4622      	mov	r2, r4
 800651e:	f7ff ff15 	bl	800634c <memcpy>
 8006522:	4631      	mov	r1, r6
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ff35 	bl	8006394 <_free_r>
 800652a:	e7e9      	b.n	8006500 <_realloc_r+0x1c>
 800652c:	4635      	mov	r5, r6
 800652e:	e7e7      	b.n	8006500 <_realloc_r+0x1c>

08006530 <_sbrk_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4c06      	ldr	r4, [pc, #24]	; (800654c <_sbrk_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4605      	mov	r5, r0
 8006538:	4608      	mov	r0, r1
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	f7ff fb4e 	bl	8005bdc <_sbrk>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_sbrk_r+0x1a>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	b103      	cbz	r3, 800654a <_sbrk_r+0x1a>
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20000668 	.word	0x20000668

08006550 <__malloc_lock>:
 8006550:	4770      	bx	lr

08006552 <__malloc_unlock>:
 8006552:	4770      	bx	lr

08006554 <_malloc_usable_size_r>:
 8006554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006558:	1f18      	subs	r0, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfbc      	itt	lt
 800655e:	580b      	ldrlt	r3, [r1, r0]
 8006560:	18c0      	addlt	r0, r0, r3
 8006562:	4770      	bx	lr

08006564 <pow>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	ed2d 8b04 	vpush	{d8-d9}
 800656c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006840 <pow+0x2dc>
 8006570:	b08d      	sub	sp, #52	; 0x34
 8006572:	ec57 6b10 	vmov	r6, r7, d0
 8006576:	ec55 4b11 	vmov	r4, r5, d1
 800657a:	f000 f965 	bl	8006848 <__ieee754_pow>
 800657e:	f999 3000 	ldrsb.w	r3, [r9]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	eeb0 8a40 	vmov.f32	s16, s0
 800658a:	eef0 8a60 	vmov.f32	s17, s1
 800658e:	46c8      	mov	r8, r9
 8006590:	d05f      	beq.n	8006652 <pow+0xee>
 8006592:	4622      	mov	r2, r4
 8006594:	462b      	mov	r3, r5
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fadf 	bl	8000b5c <__aeabi_dcmpun>
 800659e:	4683      	mov	fp, r0
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d156      	bne.n	8006652 <pow+0xee>
 80065a4:	4632      	mov	r2, r6
 80065a6:	463b      	mov	r3, r7
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7fa fad6 	bl	8000b5c <__aeabi_dcmpun>
 80065b0:	9001      	str	r0, [sp, #4]
 80065b2:	b1e8      	cbz	r0, 80065f0 <pow+0x8c>
 80065b4:	2200      	movs	r2, #0
 80065b6:	2300      	movs	r3, #0
 80065b8:	4620      	mov	r0, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7fa fa9c 	bl	8000af8 <__aeabi_dcmpeq>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d046      	beq.n	8006652 <pow+0xee>
 80065c4:	2301      	movs	r3, #1
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	4b96      	ldr	r3, [pc, #600]	; (8006824 <pow+0x2c0>)
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	4b96      	ldr	r3, [pc, #600]	; (8006828 <pow+0x2c4>)
 80065ce:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80065d2:	2200      	movs	r2, #0
 80065d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065d8:	9b00      	ldr	r3, [sp, #0]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80065e4:	d033      	beq.n	800664e <pow+0xea>
 80065e6:	a802      	add	r0, sp, #8
 80065e8:	f000 fefd 	bl	80073e6 <matherr>
 80065ec:	bb48      	cbnz	r0, 8006642 <pow+0xde>
 80065ee:	e05d      	b.n	80066ac <pow+0x148>
 80065f0:	f04f 0a00 	mov.w	sl, #0
 80065f4:	f04f 0b00 	mov.w	fp, #0
 80065f8:	4652      	mov	r2, sl
 80065fa:	465b      	mov	r3, fp
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7fa fa7a 	bl	8000af8 <__aeabi_dcmpeq>
 8006604:	ec4b ab19 	vmov	d9, sl, fp
 8006608:	2800      	cmp	r0, #0
 800660a:	d054      	beq.n	80066b6 <pow+0x152>
 800660c:	4652      	mov	r2, sl
 800660e:	465b      	mov	r3, fp
 8006610:	4620      	mov	r0, r4
 8006612:	4629      	mov	r1, r5
 8006614:	f7fa fa70 	bl	8000af8 <__aeabi_dcmpeq>
 8006618:	4680      	mov	r8, r0
 800661a:	b318      	cbz	r0, 8006664 <pow+0x100>
 800661c:	2301      	movs	r3, #1
 800661e:	9302      	str	r3, [sp, #8]
 8006620:	4b80      	ldr	r3, [pc, #512]	; (8006824 <pow+0x2c0>)
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	9b01      	ldr	r3, [sp, #4]
 8006626:	930a      	str	r3, [sp, #40]	; 0x28
 8006628:	9b00      	ldr	r3, [sp, #0]
 800662a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800662e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006632:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0d5      	beq.n	80065e6 <pow+0x82>
 800663a:	4b7b      	ldr	r3, [pc, #492]	; (8006828 <pow+0x2c4>)
 800663c:	2200      	movs	r2, #0
 800663e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006644:	b11b      	cbz	r3, 800664e <pow+0xea>
 8006646:	f7ff fb55 	bl	8005cf4 <__errno>
 800664a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006652:	eeb0 0a48 	vmov.f32	s0, s16
 8006656:	eef0 0a68 	vmov.f32	s1, s17
 800665a:	b00d      	add	sp, #52	; 0x34
 800665c:	ecbd 8b04 	vpop	{d8-d9}
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	ec45 4b10 	vmov	d0, r4, r5
 8006668:	f000 feb5 	bl	80073d6 <finite>
 800666c:	2800      	cmp	r0, #0
 800666e:	d0f0      	beq.n	8006652 <pow+0xee>
 8006670:	4652      	mov	r2, sl
 8006672:	465b      	mov	r3, fp
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f7fa fa48 	bl	8000b0c <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	d0e8      	beq.n	8006652 <pow+0xee>
 8006680:	2301      	movs	r3, #1
 8006682:	9302      	str	r3, [sp, #8]
 8006684:	4b67      	ldr	r3, [pc, #412]	; (8006824 <pow+0x2c0>)
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	f999 3000 	ldrsb.w	r3, [r9]
 800668c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006690:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006694:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006698:	b913      	cbnz	r3, 80066a0 <pow+0x13c>
 800669a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800669e:	e7a2      	b.n	80065e6 <pow+0x82>
 80066a0:	4962      	ldr	r1, [pc, #392]	; (800682c <pow+0x2c8>)
 80066a2:	2000      	movs	r0, #0
 80066a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d19c      	bne.n	80065e6 <pow+0x82>
 80066ac:	f7ff fb22 	bl	8005cf4 <__errno>
 80066b0:	2321      	movs	r3, #33	; 0x21
 80066b2:	6003      	str	r3, [r0, #0]
 80066b4:	e7c5      	b.n	8006642 <pow+0xde>
 80066b6:	eeb0 0a48 	vmov.f32	s0, s16
 80066ba:	eef0 0a68 	vmov.f32	s1, s17
 80066be:	f000 fe8a 	bl	80073d6 <finite>
 80066c2:	9000      	str	r0, [sp, #0]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f040 8081 	bne.w	80067cc <pow+0x268>
 80066ca:	ec47 6b10 	vmov	d0, r6, r7
 80066ce:	f000 fe82 	bl	80073d6 <finite>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d07a      	beq.n	80067cc <pow+0x268>
 80066d6:	ec45 4b10 	vmov	d0, r4, r5
 80066da:	f000 fe7c 	bl	80073d6 <finite>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d074      	beq.n	80067cc <pow+0x268>
 80066e2:	ec53 2b18 	vmov	r2, r3, d8
 80066e6:	ee18 0a10 	vmov	r0, s16
 80066ea:	4619      	mov	r1, r3
 80066ec:	f7fa fa36 	bl	8000b5c <__aeabi_dcmpun>
 80066f0:	f999 9000 	ldrsb.w	r9, [r9]
 80066f4:	4b4b      	ldr	r3, [pc, #300]	; (8006824 <pow+0x2c0>)
 80066f6:	b1b0      	cbz	r0, 8006726 <pow+0x1c2>
 80066f8:	2201      	movs	r2, #1
 80066fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066fe:	9b00      	ldr	r3, [sp, #0]
 8006700:	930a      	str	r3, [sp, #40]	; 0x28
 8006702:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006706:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800670a:	f1b9 0f00 	cmp.w	r9, #0
 800670e:	d0c4      	beq.n	800669a <pow+0x136>
 8006710:	4652      	mov	r2, sl
 8006712:	465b      	mov	r3, fp
 8006714:	4650      	mov	r0, sl
 8006716:	4659      	mov	r1, fp
 8006718:	f7fa f8b0 	bl	800087c <__aeabi_ddiv>
 800671c:	f1b9 0f02 	cmp.w	r9, #2
 8006720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006724:	e7c1      	b.n	80066aa <pow+0x146>
 8006726:	2203      	movs	r2, #3
 8006728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800672c:	900a      	str	r0, [sp, #40]	; 0x28
 800672e:	4629      	mov	r1, r5
 8006730:	4620      	mov	r0, r4
 8006732:	2200      	movs	r2, #0
 8006734:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <pow+0x2cc>)
 8006736:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800673a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800673e:	f7f9 ff73 	bl	8000628 <__aeabi_dmul>
 8006742:	4604      	mov	r4, r0
 8006744:	460d      	mov	r5, r1
 8006746:	f1b9 0f00 	cmp.w	r9, #0
 800674a:	d124      	bne.n	8006796 <pow+0x232>
 800674c:	4b39      	ldr	r3, [pc, #228]	; (8006834 <pow+0x2d0>)
 800674e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006752:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006756:	4630      	mov	r0, r6
 8006758:	4652      	mov	r2, sl
 800675a:	465b      	mov	r3, fp
 800675c:	4639      	mov	r1, r7
 800675e:	f7fa f9d5 	bl	8000b0c <__aeabi_dcmplt>
 8006762:	2800      	cmp	r0, #0
 8006764:	d056      	beq.n	8006814 <pow+0x2b0>
 8006766:	ec45 4b10 	vmov	d0, r4, r5
 800676a:	f000 fe49 	bl	8007400 <rint>
 800676e:	4622      	mov	r2, r4
 8006770:	462b      	mov	r3, r5
 8006772:	ec51 0b10 	vmov	r0, r1, d0
 8006776:	f7fa f9bf 	bl	8000af8 <__aeabi_dcmpeq>
 800677a:	b920      	cbnz	r0, 8006786 <pow+0x222>
 800677c:	4b2e      	ldr	r3, [pc, #184]	; (8006838 <pow+0x2d4>)
 800677e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006782:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006786:	f998 3000 	ldrsb.w	r3, [r8]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d142      	bne.n	8006814 <pow+0x2b0>
 800678e:	f7ff fab1 	bl	8005cf4 <__errno>
 8006792:	2322      	movs	r3, #34	; 0x22
 8006794:	e78d      	b.n	80066b2 <pow+0x14e>
 8006796:	4b29      	ldr	r3, [pc, #164]	; (800683c <pow+0x2d8>)
 8006798:	2200      	movs	r2, #0
 800679a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800679e:	4630      	mov	r0, r6
 80067a0:	4652      	mov	r2, sl
 80067a2:	465b      	mov	r3, fp
 80067a4:	4639      	mov	r1, r7
 80067a6:	f7fa f9b1 	bl	8000b0c <__aeabi_dcmplt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d0eb      	beq.n	8006786 <pow+0x222>
 80067ae:	ec45 4b10 	vmov	d0, r4, r5
 80067b2:	f000 fe25 	bl	8007400 <rint>
 80067b6:	4622      	mov	r2, r4
 80067b8:	462b      	mov	r3, r5
 80067ba:	ec51 0b10 	vmov	r0, r1, d0
 80067be:	f7fa f99b 	bl	8000af8 <__aeabi_dcmpeq>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1df      	bne.n	8006786 <pow+0x222>
 80067c6:	2200      	movs	r2, #0
 80067c8:	4b18      	ldr	r3, [pc, #96]	; (800682c <pow+0x2c8>)
 80067ca:	e7da      	b.n	8006782 <pow+0x21e>
 80067cc:	2200      	movs	r2, #0
 80067ce:	2300      	movs	r3, #0
 80067d0:	ec51 0b18 	vmov	r0, r1, d8
 80067d4:	f7fa f990 	bl	8000af8 <__aeabi_dcmpeq>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f43f af3a 	beq.w	8006652 <pow+0xee>
 80067de:	ec47 6b10 	vmov	d0, r6, r7
 80067e2:	f000 fdf8 	bl	80073d6 <finite>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f43f af33 	beq.w	8006652 <pow+0xee>
 80067ec:	ec45 4b10 	vmov	d0, r4, r5
 80067f0:	f000 fdf1 	bl	80073d6 <finite>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	f43f af2c 	beq.w	8006652 <pow+0xee>
 80067fa:	2304      	movs	r3, #4
 80067fc:	9302      	str	r3, [sp, #8]
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <pow+0x2c0>)
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	2300      	movs	r3, #0
 8006804:	930a      	str	r3, [sp, #40]	; 0x28
 8006806:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800680a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800680e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006812:	e7b8      	b.n	8006786 <pow+0x222>
 8006814:	a802      	add	r0, sp, #8
 8006816:	f000 fde6 	bl	80073e6 <matherr>
 800681a:	2800      	cmp	r0, #0
 800681c:	f47f af11 	bne.w	8006642 <pow+0xde>
 8006820:	e7b5      	b.n	800678e <pow+0x22a>
 8006822:	bf00      	nop
 8006824:	08007ebb 	.word	0x08007ebb
 8006828:	3ff00000 	.word	0x3ff00000
 800682c:	fff00000 	.word	0xfff00000
 8006830:	3fe00000 	.word	0x3fe00000
 8006834:	47efffff 	.word	0x47efffff
 8006838:	c7efffff 	.word	0xc7efffff
 800683c:	7ff00000 	.word	0x7ff00000
 8006840:	20000084 	.word	0x20000084
 8006844:	00000000 	.word	0x00000000

08006848 <__ieee754_pow>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	b091      	sub	sp, #68	; 0x44
 800684e:	ed8d 1b00 	vstr	d1, [sp]
 8006852:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006856:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800685a:	ea58 0302 	orrs.w	r3, r8, r2
 800685e:	ec57 6b10 	vmov	r6, r7, d0
 8006862:	f000 84be 	beq.w	80071e2 <__ieee754_pow+0x99a>
 8006866:	4b7a      	ldr	r3, [pc, #488]	; (8006a50 <__ieee754_pow+0x208>)
 8006868:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800686c:	429c      	cmp	r4, r3
 800686e:	463d      	mov	r5, r7
 8006870:	ee10 aa10 	vmov	sl, s0
 8006874:	dc09      	bgt.n	800688a <__ieee754_pow+0x42>
 8006876:	d103      	bne.n	8006880 <__ieee754_pow+0x38>
 8006878:	b93e      	cbnz	r6, 800688a <__ieee754_pow+0x42>
 800687a:	45a0      	cmp	r8, r4
 800687c:	dc0d      	bgt.n	800689a <__ieee754_pow+0x52>
 800687e:	e001      	b.n	8006884 <__ieee754_pow+0x3c>
 8006880:	4598      	cmp	r8, r3
 8006882:	dc02      	bgt.n	800688a <__ieee754_pow+0x42>
 8006884:	4598      	cmp	r8, r3
 8006886:	d10e      	bne.n	80068a6 <__ieee754_pow+0x5e>
 8006888:	b16a      	cbz	r2, 80068a6 <__ieee754_pow+0x5e>
 800688a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800688e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006892:	ea54 030a 	orrs.w	r3, r4, sl
 8006896:	f000 84a4 	beq.w	80071e2 <__ieee754_pow+0x99a>
 800689a:	486e      	ldr	r0, [pc, #440]	; (8006a54 <__ieee754_pow+0x20c>)
 800689c:	b011      	add	sp, #68	; 0x44
 800689e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a2:	f000 bda5 	b.w	80073f0 <nan>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	da53      	bge.n	8006952 <__ieee754_pow+0x10a>
 80068aa:	4b6b      	ldr	r3, [pc, #428]	; (8006a58 <__ieee754_pow+0x210>)
 80068ac:	4598      	cmp	r8, r3
 80068ae:	dc4d      	bgt.n	800694c <__ieee754_pow+0x104>
 80068b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80068b4:	4598      	cmp	r8, r3
 80068b6:	dd4c      	ble.n	8006952 <__ieee754_pow+0x10a>
 80068b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068c0:	2b14      	cmp	r3, #20
 80068c2:	dd26      	ble.n	8006912 <__ieee754_pow+0xca>
 80068c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80068c8:	fa22 f103 	lsr.w	r1, r2, r3
 80068cc:	fa01 f303 	lsl.w	r3, r1, r3
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d13e      	bne.n	8006952 <__ieee754_pow+0x10a>
 80068d4:	f001 0101 	and.w	r1, r1, #1
 80068d8:	f1c1 0b02 	rsb	fp, r1, #2
 80068dc:	2a00      	cmp	r2, #0
 80068de:	d15b      	bne.n	8006998 <__ieee754_pow+0x150>
 80068e0:	4b5b      	ldr	r3, [pc, #364]	; (8006a50 <__ieee754_pow+0x208>)
 80068e2:	4598      	cmp	r8, r3
 80068e4:	d124      	bne.n	8006930 <__ieee754_pow+0xe8>
 80068e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80068ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80068ee:	ea53 030a 	orrs.w	r3, r3, sl
 80068f2:	f000 8476 	beq.w	80071e2 <__ieee754_pow+0x99a>
 80068f6:	4b59      	ldr	r3, [pc, #356]	; (8006a5c <__ieee754_pow+0x214>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	dd2d      	ble.n	8006958 <__ieee754_pow+0x110>
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	f280 8473 	bge.w	80071ea <__ieee754_pow+0x9a2>
 8006904:	2000      	movs	r0, #0
 8006906:	2100      	movs	r1, #0
 8006908:	ec41 0b10 	vmov	d0, r0, r1
 800690c:	b011      	add	sp, #68	; 0x44
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	2a00      	cmp	r2, #0
 8006914:	d13e      	bne.n	8006994 <__ieee754_pow+0x14c>
 8006916:	f1c3 0314 	rsb	r3, r3, #20
 800691a:	fa48 f103 	asr.w	r1, r8, r3
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	4543      	cmp	r3, r8
 8006924:	f040 8469 	bne.w	80071fa <__ieee754_pow+0x9b2>
 8006928:	f001 0101 	and.w	r1, r1, #1
 800692c:	f1c1 0b02 	rsb	fp, r1, #2
 8006930:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <__ieee754_pow+0x218>)
 8006932:	4598      	cmp	r8, r3
 8006934:	d118      	bne.n	8006968 <__ieee754_pow+0x120>
 8006936:	f1b9 0f00 	cmp.w	r9, #0
 800693a:	f280 845a 	bge.w	80071f2 <__ieee754_pow+0x9aa>
 800693e:	4948      	ldr	r1, [pc, #288]	; (8006a60 <__ieee754_pow+0x218>)
 8006940:	4632      	mov	r2, r6
 8006942:	463b      	mov	r3, r7
 8006944:	2000      	movs	r0, #0
 8006946:	f7f9 ff99 	bl	800087c <__aeabi_ddiv>
 800694a:	e7dd      	b.n	8006908 <__ieee754_pow+0xc0>
 800694c:	f04f 0b02 	mov.w	fp, #2
 8006950:	e7c4      	b.n	80068dc <__ieee754_pow+0x94>
 8006952:	f04f 0b00 	mov.w	fp, #0
 8006956:	e7c1      	b.n	80068dc <__ieee754_pow+0x94>
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dad2      	bge.n	8006904 <__ieee754_pow+0xbc>
 800695e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006962:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006966:	e7cf      	b.n	8006908 <__ieee754_pow+0xc0>
 8006968:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800696c:	d106      	bne.n	800697c <__ieee754_pow+0x134>
 800696e:	4632      	mov	r2, r6
 8006970:	463b      	mov	r3, r7
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	f7f9 fe57 	bl	8000628 <__aeabi_dmul>
 800697a:	e7c5      	b.n	8006908 <__ieee754_pow+0xc0>
 800697c:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <__ieee754_pow+0x21c>)
 800697e:	4599      	cmp	r9, r3
 8006980:	d10a      	bne.n	8006998 <__ieee754_pow+0x150>
 8006982:	2d00      	cmp	r5, #0
 8006984:	db08      	blt.n	8006998 <__ieee754_pow+0x150>
 8006986:	ec47 6b10 	vmov	d0, r6, r7
 800698a:	b011      	add	sp, #68	; 0x44
 800698c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	f000 bc68 	b.w	8007264 <__ieee754_sqrt>
 8006994:	f04f 0b00 	mov.w	fp, #0
 8006998:	ec47 6b10 	vmov	d0, r6, r7
 800699c:	f000 fd12 	bl	80073c4 <fabs>
 80069a0:	ec51 0b10 	vmov	r0, r1, d0
 80069a4:	f1ba 0f00 	cmp.w	sl, #0
 80069a8:	d127      	bne.n	80069fa <__ieee754_pow+0x1b2>
 80069aa:	b124      	cbz	r4, 80069b6 <__ieee754_pow+0x16e>
 80069ac:	4b2c      	ldr	r3, [pc, #176]	; (8006a60 <__ieee754_pow+0x218>)
 80069ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d121      	bne.n	80069fa <__ieee754_pow+0x1b2>
 80069b6:	f1b9 0f00 	cmp.w	r9, #0
 80069ba:	da05      	bge.n	80069c8 <__ieee754_pow+0x180>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	2000      	movs	r0, #0
 80069c2:	4927      	ldr	r1, [pc, #156]	; (8006a60 <__ieee754_pow+0x218>)
 80069c4:	f7f9 ff5a 	bl	800087c <__aeabi_ddiv>
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	da9d      	bge.n	8006908 <__ieee754_pow+0xc0>
 80069cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80069d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80069d4:	ea54 030b 	orrs.w	r3, r4, fp
 80069d8:	d108      	bne.n	80069ec <__ieee754_pow+0x1a4>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	f7f9 fc69 	bl	80002b8 <__aeabi_dsub>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	e7ac      	b.n	8006946 <__ieee754_pow+0xfe>
 80069ec:	f1bb 0f01 	cmp.w	fp, #1
 80069f0:	d18a      	bne.n	8006908 <__ieee754_pow+0xc0>
 80069f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069f6:	4619      	mov	r1, r3
 80069f8:	e786      	b.n	8006908 <__ieee754_pow+0xc0>
 80069fa:	0fed      	lsrs	r5, r5, #31
 80069fc:	1e6b      	subs	r3, r5, #1
 80069fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006a00:	ea5b 0303 	orrs.w	r3, fp, r3
 8006a04:	d102      	bne.n	8006a0c <__ieee754_pow+0x1c4>
 8006a06:	4632      	mov	r2, r6
 8006a08:	463b      	mov	r3, r7
 8006a0a:	e7e8      	b.n	80069de <__ieee754_pow+0x196>
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <__ieee754_pow+0x220>)
 8006a0e:	4598      	cmp	r8, r3
 8006a10:	f340 80fe 	ble.w	8006c10 <__ieee754_pow+0x3c8>
 8006a14:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006a18:	4598      	cmp	r8, r3
 8006a1a:	dd0a      	ble.n	8006a32 <__ieee754_pow+0x1ea>
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <__ieee754_pow+0x214>)
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	dc0d      	bgt.n	8006a3e <__ieee754_pow+0x1f6>
 8006a22:	f1b9 0f00 	cmp.w	r9, #0
 8006a26:	f6bf af6d 	bge.w	8006904 <__ieee754_pow+0xbc>
 8006a2a:	a307      	add	r3, pc, #28	; (adr r3, 8006a48 <__ieee754_pow+0x200>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	e79f      	b.n	8006972 <__ieee754_pow+0x12a>
 8006a32:	4b0e      	ldr	r3, [pc, #56]	; (8006a6c <__ieee754_pow+0x224>)
 8006a34:	429c      	cmp	r4, r3
 8006a36:	ddf4      	ble.n	8006a22 <__ieee754_pow+0x1da>
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <__ieee754_pow+0x218>)
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	dd18      	ble.n	8006a70 <__ieee754_pow+0x228>
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	dcf2      	bgt.n	8006a2a <__ieee754_pow+0x1e2>
 8006a44:	e75e      	b.n	8006904 <__ieee754_pow+0xbc>
 8006a46:	bf00      	nop
 8006a48:	8800759c 	.word	0x8800759c
 8006a4c:	7e37e43c 	.word	0x7e37e43c
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	08007e8d 	.word	0x08007e8d
 8006a58:	433fffff 	.word	0x433fffff
 8006a5c:	3fefffff 	.word	0x3fefffff
 8006a60:	3ff00000 	.word	0x3ff00000
 8006a64:	3fe00000 	.word	0x3fe00000
 8006a68:	41e00000 	.word	0x41e00000
 8006a6c:	3feffffe 	.word	0x3feffffe
 8006a70:	2200      	movs	r2, #0
 8006a72:	4b63      	ldr	r3, [pc, #396]	; (8006c00 <__ieee754_pow+0x3b8>)
 8006a74:	f7f9 fc20 	bl	80002b8 <__aeabi_dsub>
 8006a78:	a355      	add	r3, pc, #340	; (adr r3, 8006bd0 <__ieee754_pow+0x388>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	4604      	mov	r4, r0
 8006a80:	460d      	mov	r5, r1
 8006a82:	f7f9 fdd1 	bl	8000628 <__aeabi_dmul>
 8006a86:	a354      	add	r3, pc, #336	; (adr r3, 8006bd8 <__ieee754_pow+0x390>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	4620      	mov	r0, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	f7f9 fdc8 	bl	8000628 <__aeabi_dmul>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a9e:	4b59      	ldr	r3, [pc, #356]	; (8006c04 <__ieee754_pow+0x3bc>)
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7f9 fdc0 	bl	8000628 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	a14c      	add	r1, pc, #304	; (adr r1, 8006be0 <__ieee754_pow+0x398>)
 8006aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab2:	f7f9 fc01 	bl	80002b8 <__aeabi_dsub>
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	462b      	mov	r3, r5
 8006aba:	f7f9 fdb5 	bl	8000628 <__aeabi_dmul>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	4950      	ldr	r1, [pc, #320]	; (8006c08 <__ieee754_pow+0x3c0>)
 8006ac6:	f7f9 fbf7 	bl	80002b8 <__aeabi_dsub>
 8006aca:	4622      	mov	r2, r4
 8006acc:	462b      	mov	r3, r5
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	f7f9 fda7 	bl	8000628 <__aeabi_dmul>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 fda1 	bl	8000628 <__aeabi_dmul>
 8006ae6:	a340      	add	r3, pc, #256	; (adr r3, 8006be8 <__ieee754_pow+0x3a0>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7f9 fd9c 	bl	8000628 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af8:	f7f9 fbde 	bl	80002b8 <__aeabi_dsub>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4604      	mov	r4, r0
 8006b02:	460d      	mov	r5, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 fbd8 	bl	80002bc <__adddf3>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 fbcf 	bl	80002b8 <__aeabi_dsub>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fbc9 	bl	80002b8 <__aeabi_dsub>
 8006b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b28:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	f040 81eb 	bne.w	8006f0c <__ieee754_pow+0x6c4>
 8006b36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006bf0 <__ieee754_pow+0x3a8>
 8006b3a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006b3e:	2400      	movs	r4, #0
 8006b40:	4622      	mov	r2, r4
 8006b42:	462b      	mov	r3, r5
 8006b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b4c:	f7f9 fbb4 	bl	80002b8 <__aeabi_dsub>
 8006b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b54:	f7f9 fd68 	bl	8000628 <__aeabi_dmul>
 8006b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4689      	mov	r9, r1
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 fd60 	bl	8000628 <__aeabi_dmul>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	4649      	mov	r1, r9
 8006b70:	f7f9 fba4 	bl	80002bc <__adddf3>
 8006b74:	4622      	mov	r2, r4
 8006b76:	462b      	mov	r3, r5
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b80:	f7f9 fd52 	bl	8000628 <__aeabi_dmul>
 8006b84:	460b      	mov	r3, r1
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	4640      	mov	r0, r8
 8006b90:	e9cd 4500 	strd	r4, r5, [sp]
 8006b94:	f7f9 fb92 	bl	80002bc <__adddf3>
 8006b98:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <__ieee754_pow+0x3c4>)
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	468b      	mov	fp, r1
 8006ba2:	f340 82f7 	ble.w	8007194 <__ieee754_pow+0x94c>
 8006ba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006baa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006bae:	4303      	orrs	r3, r0
 8006bb0:	f000 81ea 	beq.w	8006f88 <__ieee754_pow+0x740>
 8006bb4:	a310      	add	r3, pc, #64	; (adr r3, 8006bf8 <__ieee754_pow+0x3b0>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bbe:	f7f9 fd33 	bl	8000628 <__aeabi_dmul>
 8006bc2:	a30d      	add	r3, pc, #52	; (adr r3, 8006bf8 <__ieee754_pow+0x3b0>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	e6d5      	b.n	8006976 <__ieee754_pow+0x12e>
 8006bca:	bf00      	nop
 8006bcc:	f3af 8000 	nop.w
 8006bd0:	60000000 	.word	0x60000000
 8006bd4:	3ff71547 	.word	0x3ff71547
 8006bd8:	f85ddf44 	.word	0xf85ddf44
 8006bdc:	3e54ae0b 	.word	0x3e54ae0b
 8006be0:	55555555 	.word	0x55555555
 8006be4:	3fd55555 	.word	0x3fd55555
 8006be8:	652b82fe 	.word	0x652b82fe
 8006bec:	3ff71547 	.word	0x3ff71547
 8006bf0:	00000000 	.word	0x00000000
 8006bf4:	bff00000 	.word	0xbff00000
 8006bf8:	8800759c 	.word	0x8800759c
 8006bfc:	7e37e43c 	.word	0x7e37e43c
 8006c00:	3ff00000 	.word	0x3ff00000
 8006c04:	3fd00000 	.word	0x3fd00000
 8006c08:	3fe00000 	.word	0x3fe00000
 8006c0c:	408fffff 	.word	0x408fffff
 8006c10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	da05      	bge.n	8006c26 <__ieee754_pow+0x3de>
 8006c1a:	4bd3      	ldr	r3, [pc, #844]	; (8006f68 <__ieee754_pow+0x720>)
 8006c1c:	f7f9 fd04 	bl	8000628 <__aeabi_dmul>
 8006c20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006c24:	460c      	mov	r4, r1
 8006c26:	1523      	asrs	r3, r4, #20
 8006c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c2c:	4413      	add	r3, r2
 8006c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c30:	4bce      	ldr	r3, [pc, #824]	; (8006f6c <__ieee754_pow+0x724>)
 8006c32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006c36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c40:	dd08      	ble.n	8006c54 <__ieee754_pow+0x40c>
 8006c42:	4bcb      	ldr	r3, [pc, #812]	; (8006f70 <__ieee754_pow+0x728>)
 8006c44:	429c      	cmp	r4, r3
 8006c46:	f340 815e 	ble.w	8006f06 <__ieee754_pow+0x6be>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c54:	f04f 0a00 	mov.w	sl, #0
 8006c58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c60:	4bc4      	ldr	r3, [pc, #784]	; (8006f74 <__ieee754_pow+0x72c>)
 8006c62:	4413      	add	r3, r2
 8006c64:	ed93 7b00 	vldr	d7, [r3]
 8006c68:	4629      	mov	r1, r5
 8006c6a:	ec53 2b17 	vmov	r2, r3, d7
 8006c6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006c72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c76:	f7f9 fb1f 	bl	80002b8 <__aeabi_dsub>
 8006c7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c86:	f7f9 fb19 	bl	80002bc <__adddf3>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	2000      	movs	r0, #0
 8006c90:	49b9      	ldr	r1, [pc, #740]	; (8006f78 <__ieee754_pow+0x730>)
 8006c92:	f7f9 fdf3 	bl	800087c <__aeabi_ddiv>
 8006c96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fcc1 	bl	8000628 <__aeabi_dmul>
 8006ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006caa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cba:	106d      	asrs	r5, r5, #1
 8006cbc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006cc0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006cca:	4640      	mov	r0, r8
 8006ccc:	4649      	mov	r1, r9
 8006cce:	4614      	mov	r4, r2
 8006cd0:	461d      	mov	r5, r3
 8006cd2:	f7f9 fca9 	bl	8000628 <__aeabi_dmul>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4639      	mov	r1, r7
 8006cde:	f7f9 faeb 	bl	80002b8 <__aeabi_dsub>
 8006ce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	4620      	mov	r0, r4
 8006cec:	4629      	mov	r1, r5
 8006cee:	f7f9 fae3 	bl	80002b8 <__aeabi_dsub>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cfa:	f7f9 fadd 	bl	80002b8 <__aeabi_dsub>
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	f7f9 fc91 	bl	8000628 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fad3 	bl	80002b8 <__aeabi_dsub>
 8006d12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d16:	f7f9 fc87 	bl	8000628 <__aeabi_dmul>
 8006d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7f9 fc7f 	bl	8000628 <__aeabi_dmul>
 8006d2a:	a37b      	add	r3, pc, #492	; (adr r3, 8006f18 <__ieee754_pow+0x6d0>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	f7f9 fc78 	bl	8000628 <__aeabi_dmul>
 8006d38:	a379      	add	r3, pc, #484	; (adr r3, 8006f20 <__ieee754_pow+0x6d8>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fabd 	bl	80002bc <__adddf3>
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	f7f9 fc6f 	bl	8000628 <__aeabi_dmul>
 8006d4a:	a377      	add	r3, pc, #476	; (adr r3, 8006f28 <__ieee754_pow+0x6e0>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 fab4 	bl	80002bc <__adddf3>
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	f7f9 fc66 	bl	8000628 <__aeabi_dmul>
 8006d5c:	a374      	add	r3, pc, #464	; (adr r3, 8006f30 <__ieee754_pow+0x6e8>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 faab 	bl	80002bc <__adddf3>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 fc5d 	bl	8000628 <__aeabi_dmul>
 8006d6e:	a372      	add	r3, pc, #456	; (adr r3, 8006f38 <__ieee754_pow+0x6f0>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 faa2 	bl	80002bc <__adddf3>
 8006d78:	4622      	mov	r2, r4
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	f7f9 fc54 	bl	8000628 <__aeabi_dmul>
 8006d80:	a36f      	add	r3, pc, #444	; (adr r3, 8006f40 <__ieee754_pow+0x6f8>)
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 fa99 	bl	80002bc <__adddf3>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	460f      	mov	r7, r1
 8006d90:	462b      	mov	r3, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	f7f9 fc47 	bl	8000628 <__aeabi_dmul>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fc41 	bl	8000628 <__aeabi_dmul>
 8006da6:	4642      	mov	r2, r8
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	464b      	mov	r3, r9
 8006dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db2:	f7f9 fa83 	bl	80002bc <__adddf3>
 8006db6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dba:	f7f9 fc35 	bl	8000628 <__aeabi_dmul>
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	462b      	mov	r3, r5
 8006dc2:	f7f9 fa7b 	bl	80002bc <__adddf3>
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	4606      	mov	r6, r0
 8006dca:	460f      	mov	r7, r1
 8006dcc:	464b      	mov	r3, r9
 8006dce:	4640      	mov	r0, r8
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	f7f9 fc29 	bl	8000628 <__aeabi_dmul>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4b68      	ldr	r3, [pc, #416]	; (8006f7c <__ieee754_pow+0x734>)
 8006dda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006dde:	f7f9 fa6d 	bl	80002bc <__adddf3>
 8006de2:	4632      	mov	r2, r6
 8006de4:	463b      	mov	r3, r7
 8006de6:	f7f9 fa69 	bl	80002bc <__adddf3>
 8006dea:	9802      	ldr	r0, [sp, #8]
 8006dec:	460d      	mov	r5, r1
 8006dee:	4604      	mov	r4, r0
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4640      	mov	r0, r8
 8006df6:	4649      	mov	r1, r9
 8006df8:	f7f9 fc16 	bl	8000628 <__aeabi_dmul>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4680      	mov	r8, r0
 8006e00:	4689      	mov	r9, r1
 8006e02:	4b5e      	ldr	r3, [pc, #376]	; (8006f7c <__ieee754_pow+0x734>)
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fa56 	bl	80002b8 <__aeabi_dsub>
 8006e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e10:	f7f9 fa52 	bl	80002b8 <__aeabi_dsub>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fa4c 	bl	80002b8 <__aeabi_dsub>
 8006e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e24:	f7f9 fc00 	bl	8000628 <__aeabi_dmul>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	462b      	mov	r3, r5
 8006e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e34:	f7f9 fbf8 	bl	8000628 <__aeabi_dmul>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	4639      	mov	r1, r7
 8006e40:	f7f9 fa3c 	bl	80002bc <__adddf3>
 8006e44:	4606      	mov	r6, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 fa34 	bl	80002bc <__adddf3>
 8006e54:	9802      	ldr	r0, [sp, #8]
 8006e56:	a33c      	add	r3, pc, #240	; (adr r3, 8006f48 <__ieee754_pow+0x700>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	f7f9 fbe2 	bl	8000628 <__aeabi_dmul>
 8006e64:	4642      	mov	r2, r8
 8006e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fa22 	bl	80002b8 <__aeabi_dsub>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fa1c 	bl	80002b8 <__aeabi_dsub>
 8006e80:	a333      	add	r3, pc, #204	; (adr r3, 8006f50 <__ieee754_pow+0x708>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f7f9 fbcf 	bl	8000628 <__aeabi_dmul>
 8006e8a:	a333      	add	r3, pc, #204	; (adr r3, 8006f58 <__ieee754_pow+0x710>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	4606      	mov	r6, r0
 8006e92:	460f      	mov	r7, r1
 8006e94:	4620      	mov	r0, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	f7f9 fbc6 	bl	8000628 <__aeabi_dmul>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 fa0a 	bl	80002bc <__adddf3>
 8006ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eaa:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <__ieee754_pow+0x738>)
 8006eac:	4413      	add	r3, r2
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 fa03 	bl	80002bc <__adddf3>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eba:	460d      	mov	r5, r1
 8006ebc:	f7f9 fb4a 	bl	8000554 <__aeabi_i2d>
 8006ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec2:	4b30      	ldr	r3, [pc, #192]	; (8006f84 <__ieee754_pow+0x73c>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ed6:	f7f9 f9f1 	bl	80002bc <__adddf3>
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	f7f9 f9ed 	bl	80002bc <__adddf3>
 8006ee2:	4632      	mov	r2, r6
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	f7f9 f9e9 	bl	80002bc <__adddf3>
 8006eea:	9802      	ldr	r0, [sp, #8]
 8006eec:	4632      	mov	r2, r6
 8006eee:	463b      	mov	r3, r7
 8006ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ef4:	f7f9 f9e0 	bl	80002b8 <__aeabi_dsub>
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	f7f9 f9dc 	bl	80002b8 <__aeabi_dsub>
 8006f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f04:	e607      	b.n	8006b16 <__ieee754_pow+0x2ce>
 8006f06:	f04f 0a01 	mov.w	sl, #1
 8006f0a:	e6a5      	b.n	8006c58 <__ieee754_pow+0x410>
 8006f0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006f60 <__ieee754_pow+0x718>
 8006f10:	e613      	b.n	8006b3a <__ieee754_pow+0x2f2>
 8006f12:	bf00      	nop
 8006f14:	f3af 8000 	nop.w
 8006f18:	4a454eef 	.word	0x4a454eef
 8006f1c:	3fca7e28 	.word	0x3fca7e28
 8006f20:	93c9db65 	.word	0x93c9db65
 8006f24:	3fcd864a 	.word	0x3fcd864a
 8006f28:	a91d4101 	.word	0xa91d4101
 8006f2c:	3fd17460 	.word	0x3fd17460
 8006f30:	518f264d 	.word	0x518f264d
 8006f34:	3fd55555 	.word	0x3fd55555
 8006f38:	db6fabff 	.word	0xdb6fabff
 8006f3c:	3fdb6db6 	.word	0x3fdb6db6
 8006f40:	33333303 	.word	0x33333303
 8006f44:	3fe33333 	.word	0x3fe33333
 8006f48:	e0000000 	.word	0xe0000000
 8006f4c:	3feec709 	.word	0x3feec709
 8006f50:	dc3a03fd 	.word	0xdc3a03fd
 8006f54:	3feec709 	.word	0x3feec709
 8006f58:	145b01f5 	.word	0x145b01f5
 8006f5c:	be3e2fe0 	.word	0xbe3e2fe0
 8006f60:	00000000 	.word	0x00000000
 8006f64:	3ff00000 	.word	0x3ff00000
 8006f68:	43400000 	.word	0x43400000
 8006f6c:	0003988e 	.word	0x0003988e
 8006f70:	000bb679 	.word	0x000bb679
 8006f74:	08007ec0 	.word	0x08007ec0
 8006f78:	3ff00000 	.word	0x3ff00000
 8006f7c:	40080000 	.word	0x40080000
 8006f80:	08007ee0 	.word	0x08007ee0
 8006f84:	08007ed0 	.word	0x08007ed0
 8006f88:	a3b4      	add	r3, pc, #720	; (adr r3, 800725c <__ieee754_pow+0xa14>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 f993 	bl	80002bc <__adddf3>
 8006f96:	4622      	mov	r2, r4
 8006f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 f989 	bl	80002b8 <__aeabi_dsub>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fae:	f7f9 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f47f adfe 	bne.w	8006bb4 <__ieee754_pow+0x36c>
 8006fb8:	4aa3      	ldr	r2, [pc, #652]	; (8007248 <__ieee754_pow+0xa00>)
 8006fba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	f340 810a 	ble.w	80071d8 <__ieee754_pow+0x990>
 8006fc4:	151b      	asrs	r3, r3, #20
 8006fc6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006fca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006fce:	fa4a f303 	asr.w	r3, sl, r3
 8006fd2:	445b      	add	r3, fp
 8006fd4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006fd8:	4e9c      	ldr	r6, [pc, #624]	; (800724c <__ieee754_pow+0xa04>)
 8006fda:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006fde:	4116      	asrs	r6, r2
 8006fe0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	ea23 0106 	bic.w	r1, r3, r6
 8006fea:	f1c2 0214 	rsb	r2, r2, #20
 8006fee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006ff2:	fa4a fa02 	asr.w	sl, sl, r2
 8006ff6:	f1bb 0f00 	cmp.w	fp, #0
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	bfb8      	it	lt
 8007004:	f1ca 0a00 	rsblt	sl, sl, #0
 8007008:	f7f9 f956 	bl	80002b8 <__aeabi_dsub>
 800700c:	e9cd 0100 	strd	r0, r1, [sp]
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007018:	f7f9 f950 	bl	80002bc <__adddf3>
 800701c:	2000      	movs	r0, #0
 800701e:	a378      	add	r3, pc, #480	; (adr r3, 8007200 <__ieee754_pow+0x9b8>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	f7f9 fafe 	bl	8000628 <__aeabi_dmul>
 800702c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007030:	4606      	mov	r6, r0
 8007032:	460f      	mov	r7, r1
 8007034:	4620      	mov	r0, r4
 8007036:	4629      	mov	r1, r5
 8007038:	f7f9 f93e 	bl	80002b8 <__aeabi_dsub>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4640      	mov	r0, r8
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 f938 	bl	80002b8 <__aeabi_dsub>
 8007048:	a36f      	add	r3, pc, #444	; (adr r3, 8007208 <__ieee754_pow+0x9c0>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 faeb 	bl	8000628 <__aeabi_dmul>
 8007052:	a36f      	add	r3, pc, #444	; (adr r3, 8007210 <__ieee754_pow+0x9c8>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	4680      	mov	r8, r0
 800705a:	4689      	mov	r9, r1
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f7f9 fae2 	bl	8000628 <__aeabi_dmul>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4640      	mov	r0, r8
 800706a:	4649      	mov	r1, r9
 800706c:	f7f9 f926 	bl	80002bc <__adddf3>
 8007070:	4604      	mov	r4, r0
 8007072:	460d      	mov	r5, r1
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 f91e 	bl	80002bc <__adddf3>
 8007080:	4632      	mov	r2, r6
 8007082:	463b      	mov	r3, r7
 8007084:	4680      	mov	r8, r0
 8007086:	4689      	mov	r9, r1
 8007088:	f7f9 f916 	bl	80002b8 <__aeabi_dsub>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4620      	mov	r0, r4
 8007092:	4629      	mov	r1, r5
 8007094:	f7f9 f910 	bl	80002b8 <__aeabi_dsub>
 8007098:	4642      	mov	r2, r8
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	464b      	mov	r3, r9
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 fac0 	bl	8000628 <__aeabi_dmul>
 80070a8:	a35b      	add	r3, pc, #364	; (adr r3, 8007218 <__ieee754_pow+0x9d0>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	f7f9 fab9 	bl	8000628 <__aeabi_dmul>
 80070b6:	a35a      	add	r3, pc, #360	; (adr r3, 8007220 <__ieee754_pow+0x9d8>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f7f9 f8fc 	bl	80002b8 <__aeabi_dsub>
 80070c0:	4622      	mov	r2, r4
 80070c2:	462b      	mov	r3, r5
 80070c4:	f7f9 fab0 	bl	8000628 <__aeabi_dmul>
 80070c8:	a357      	add	r3, pc, #348	; (adr r3, 8007228 <__ieee754_pow+0x9e0>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 f8f5 	bl	80002bc <__adddf3>
 80070d2:	4622      	mov	r2, r4
 80070d4:	462b      	mov	r3, r5
 80070d6:	f7f9 faa7 	bl	8000628 <__aeabi_dmul>
 80070da:	a355      	add	r3, pc, #340	; (adr r3, 8007230 <__ieee754_pow+0x9e8>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 f8ea 	bl	80002b8 <__aeabi_dsub>
 80070e4:	4622      	mov	r2, r4
 80070e6:	462b      	mov	r3, r5
 80070e8:	f7f9 fa9e 	bl	8000628 <__aeabi_dmul>
 80070ec:	a352      	add	r3, pc, #328	; (adr r3, 8007238 <__ieee754_pow+0x9f0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 f8e3 	bl	80002bc <__adddf3>
 80070f6:	4622      	mov	r2, r4
 80070f8:	462b      	mov	r3, r5
 80070fa:	f7f9 fa95 	bl	8000628 <__aeabi_dmul>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 f8d7 	bl	80002b8 <__aeabi_dsub>
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4640      	mov	r0, r8
 8007114:	4649      	mov	r1, r9
 8007116:	f7f9 fa87 	bl	8000628 <__aeabi_dmul>
 800711a:	2200      	movs	r2, #0
 800711c:	e9cd 0100 	strd	r0, r1, [sp]
 8007120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 f8c6 	bl	80002b8 <__aeabi_dsub>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007134:	f7f9 fba2 	bl	800087c <__aeabi_ddiv>
 8007138:	4632      	mov	r2, r6
 800713a:	4604      	mov	r4, r0
 800713c:	460d      	mov	r5, r1
 800713e:	463b      	mov	r3, r7
 8007140:	4640      	mov	r0, r8
 8007142:	4649      	mov	r1, r9
 8007144:	f7f9 fa70 	bl	8000628 <__aeabi_dmul>
 8007148:	4632      	mov	r2, r6
 800714a:	463b      	mov	r3, r7
 800714c:	f7f9 f8b6 	bl	80002bc <__adddf3>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4620      	mov	r0, r4
 8007156:	4629      	mov	r1, r5
 8007158:	f7f9 f8ae 	bl	80002b8 <__aeabi_dsub>
 800715c:	4642      	mov	r2, r8
 800715e:	464b      	mov	r3, r9
 8007160:	f7f9 f8aa 	bl	80002b8 <__aeabi_dsub>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	2000      	movs	r0, #0
 800716a:	4939      	ldr	r1, [pc, #228]	; (8007250 <__ieee754_pow+0xa08>)
 800716c:	f7f9 f8a4 	bl	80002b8 <__aeabi_dsub>
 8007170:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007174:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	da2f      	bge.n	80071de <__ieee754_pow+0x996>
 800717e:	4650      	mov	r0, sl
 8007180:	ec43 2b10 	vmov	d0, r2, r3
 8007184:	f000 f9c0 	bl	8007508 <scalbn>
 8007188:	ec51 0b10 	vmov	r0, r1, d0
 800718c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007190:	f7ff bbf1 	b.w	8006976 <__ieee754_pow+0x12e>
 8007194:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <__ieee754_pow+0xa0c>)
 8007196:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800719a:	429e      	cmp	r6, r3
 800719c:	f77f af0c 	ble.w	8006fb8 <__ieee754_pow+0x770>
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <__ieee754_pow+0xa10>)
 80071a2:	440b      	add	r3, r1
 80071a4:	4303      	orrs	r3, r0
 80071a6:	d00b      	beq.n	80071c0 <__ieee754_pow+0x978>
 80071a8:	a325      	add	r3, pc, #148	; (adr r3, 8007240 <__ieee754_pow+0x9f8>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071b2:	f7f9 fa39 	bl	8000628 <__aeabi_dmul>
 80071b6:	a322      	add	r3, pc, #136	; (adr r3, 8007240 <__ieee754_pow+0x9f8>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7ff bbdb 	b.w	8006976 <__ieee754_pow+0x12e>
 80071c0:	4622      	mov	r2, r4
 80071c2:	462b      	mov	r3, r5
 80071c4:	f7f9 f878 	bl	80002b8 <__aeabi_dsub>
 80071c8:	4642      	mov	r2, r8
 80071ca:	464b      	mov	r3, r9
 80071cc:	f7f9 fcb2 	bl	8000b34 <__aeabi_dcmpge>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f43f aef1 	beq.w	8006fb8 <__ieee754_pow+0x770>
 80071d6:	e7e7      	b.n	80071a8 <__ieee754_pow+0x960>
 80071d8:	f04f 0a00 	mov.w	sl, #0
 80071dc:	e718      	b.n	8007010 <__ieee754_pow+0x7c8>
 80071de:	4621      	mov	r1, r4
 80071e0:	e7d4      	b.n	800718c <__ieee754_pow+0x944>
 80071e2:	2000      	movs	r0, #0
 80071e4:	491a      	ldr	r1, [pc, #104]	; (8007250 <__ieee754_pow+0xa08>)
 80071e6:	f7ff bb8f 	b.w	8006908 <__ieee754_pow+0xc0>
 80071ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ee:	f7ff bb8b 	b.w	8006908 <__ieee754_pow+0xc0>
 80071f2:	4630      	mov	r0, r6
 80071f4:	4639      	mov	r1, r7
 80071f6:	f7ff bb87 	b.w	8006908 <__ieee754_pow+0xc0>
 80071fa:	4693      	mov	fp, r2
 80071fc:	f7ff bb98 	b.w	8006930 <__ieee754_pow+0xe8>
 8007200:	00000000 	.word	0x00000000
 8007204:	3fe62e43 	.word	0x3fe62e43
 8007208:	fefa39ef 	.word	0xfefa39ef
 800720c:	3fe62e42 	.word	0x3fe62e42
 8007210:	0ca86c39 	.word	0x0ca86c39
 8007214:	be205c61 	.word	0xbe205c61
 8007218:	72bea4d0 	.word	0x72bea4d0
 800721c:	3e663769 	.word	0x3e663769
 8007220:	c5d26bf1 	.word	0xc5d26bf1
 8007224:	3ebbbd41 	.word	0x3ebbbd41
 8007228:	af25de2c 	.word	0xaf25de2c
 800722c:	3f11566a 	.word	0x3f11566a
 8007230:	16bebd93 	.word	0x16bebd93
 8007234:	3f66c16c 	.word	0x3f66c16c
 8007238:	5555553e 	.word	0x5555553e
 800723c:	3fc55555 	.word	0x3fc55555
 8007240:	c2f8f359 	.word	0xc2f8f359
 8007244:	01a56e1f 	.word	0x01a56e1f
 8007248:	3fe00000 	.word	0x3fe00000
 800724c:	000fffff 	.word	0x000fffff
 8007250:	3ff00000 	.word	0x3ff00000
 8007254:	4090cbff 	.word	0x4090cbff
 8007258:	3f6f3400 	.word	0x3f6f3400
 800725c:	652b82fe 	.word	0x652b82fe
 8007260:	3c971547 	.word	0x3c971547

08007264 <__ieee754_sqrt>:
 8007264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007268:	4955      	ldr	r1, [pc, #340]	; (80073c0 <__ieee754_sqrt+0x15c>)
 800726a:	ec55 4b10 	vmov	r4, r5, d0
 800726e:	43a9      	bics	r1, r5
 8007270:	462b      	mov	r3, r5
 8007272:	462a      	mov	r2, r5
 8007274:	d112      	bne.n	800729c <__ieee754_sqrt+0x38>
 8007276:	ee10 2a10 	vmov	r2, s0
 800727a:	ee10 0a10 	vmov	r0, s0
 800727e:	4629      	mov	r1, r5
 8007280:	f7f9 f9d2 	bl	8000628 <__aeabi_dmul>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f9 f816 	bl	80002bc <__adddf3>
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	ec45 4b10 	vmov	d0, r4, r5
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	2d00      	cmp	r5, #0
 800729e:	ee10 0a10 	vmov	r0, s0
 80072a2:	4621      	mov	r1, r4
 80072a4:	dc0f      	bgt.n	80072c6 <__ieee754_sqrt+0x62>
 80072a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072aa:	4330      	orrs	r0, r6
 80072ac:	d0f2      	beq.n	8007294 <__ieee754_sqrt+0x30>
 80072ae:	b155      	cbz	r5, 80072c6 <__ieee754_sqrt+0x62>
 80072b0:	ee10 2a10 	vmov	r2, s0
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f8 fffe 	bl	80002b8 <__aeabi_dsub>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	f7f9 fadc 	bl	800087c <__aeabi_ddiv>
 80072c4:	e7e4      	b.n	8007290 <__ieee754_sqrt+0x2c>
 80072c6:	151b      	asrs	r3, r3, #20
 80072c8:	d073      	beq.n	80073b2 <__ieee754_sqrt+0x14e>
 80072ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80072ce:	07dd      	lsls	r5, r3, #31
 80072d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80072d4:	bf48      	it	mi
 80072d6:	0fc8      	lsrmi	r0, r1, #31
 80072d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072dc:	bf44      	itt	mi
 80072de:	0049      	lslmi	r1, r1, #1
 80072e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80072e4:	2500      	movs	r5, #0
 80072e6:	1058      	asrs	r0, r3, #1
 80072e8:	0fcb      	lsrs	r3, r1, #31
 80072ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80072ee:	0049      	lsls	r1, r1, #1
 80072f0:	2316      	movs	r3, #22
 80072f2:	462c      	mov	r4, r5
 80072f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80072f8:	19a7      	adds	r7, r4, r6
 80072fa:	4297      	cmp	r7, r2
 80072fc:	bfde      	ittt	le
 80072fe:	19bc      	addle	r4, r7, r6
 8007300:	1bd2      	suble	r2, r2, r7
 8007302:	19ad      	addle	r5, r5, r6
 8007304:	0fcf      	lsrs	r7, r1, #31
 8007306:	3b01      	subs	r3, #1
 8007308:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800730c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007310:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007314:	d1f0      	bne.n	80072f8 <__ieee754_sqrt+0x94>
 8007316:	f04f 0c20 	mov.w	ip, #32
 800731a:	469e      	mov	lr, r3
 800731c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007320:	42a2      	cmp	r2, r4
 8007322:	eb06 070e 	add.w	r7, r6, lr
 8007326:	dc02      	bgt.n	800732e <__ieee754_sqrt+0xca>
 8007328:	d112      	bne.n	8007350 <__ieee754_sqrt+0xec>
 800732a:	428f      	cmp	r7, r1
 800732c:	d810      	bhi.n	8007350 <__ieee754_sqrt+0xec>
 800732e:	2f00      	cmp	r7, #0
 8007330:	eb07 0e06 	add.w	lr, r7, r6
 8007334:	da42      	bge.n	80073bc <__ieee754_sqrt+0x158>
 8007336:	f1be 0f00 	cmp.w	lr, #0
 800733a:	db3f      	blt.n	80073bc <__ieee754_sqrt+0x158>
 800733c:	f104 0801 	add.w	r8, r4, #1
 8007340:	1b12      	subs	r2, r2, r4
 8007342:	428f      	cmp	r7, r1
 8007344:	bf88      	it	hi
 8007346:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800734a:	1bc9      	subs	r1, r1, r7
 800734c:	4433      	add	r3, r6
 800734e:	4644      	mov	r4, r8
 8007350:	0052      	lsls	r2, r2, #1
 8007352:	f1bc 0c01 	subs.w	ip, ip, #1
 8007356:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800735a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800735e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007362:	d1dd      	bne.n	8007320 <__ieee754_sqrt+0xbc>
 8007364:	430a      	orrs	r2, r1
 8007366:	d006      	beq.n	8007376 <__ieee754_sqrt+0x112>
 8007368:	1c5c      	adds	r4, r3, #1
 800736a:	bf13      	iteet	ne
 800736c:	3301      	addne	r3, #1
 800736e:	3501      	addeq	r5, #1
 8007370:	4663      	moveq	r3, ip
 8007372:	f023 0301 	bicne.w	r3, r3, #1
 8007376:	106a      	asrs	r2, r5, #1
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	07e9      	lsls	r1, r5, #31
 800737c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007380:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007384:	bf48      	it	mi
 8007386:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800738a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800738e:	461c      	mov	r4, r3
 8007390:	e780      	b.n	8007294 <__ieee754_sqrt+0x30>
 8007392:	0aca      	lsrs	r2, r1, #11
 8007394:	3815      	subs	r0, #21
 8007396:	0549      	lsls	r1, r1, #21
 8007398:	2a00      	cmp	r2, #0
 800739a:	d0fa      	beq.n	8007392 <__ieee754_sqrt+0x12e>
 800739c:	02d6      	lsls	r6, r2, #11
 800739e:	d50a      	bpl.n	80073b6 <__ieee754_sqrt+0x152>
 80073a0:	f1c3 0420 	rsb	r4, r3, #32
 80073a4:	fa21 f404 	lsr.w	r4, r1, r4
 80073a8:	1e5d      	subs	r5, r3, #1
 80073aa:	4099      	lsls	r1, r3
 80073ac:	4322      	orrs	r2, r4
 80073ae:	1b43      	subs	r3, r0, r5
 80073b0:	e78b      	b.n	80072ca <__ieee754_sqrt+0x66>
 80073b2:	4618      	mov	r0, r3
 80073b4:	e7f0      	b.n	8007398 <__ieee754_sqrt+0x134>
 80073b6:	0052      	lsls	r2, r2, #1
 80073b8:	3301      	adds	r3, #1
 80073ba:	e7ef      	b.n	800739c <__ieee754_sqrt+0x138>
 80073bc:	46a0      	mov	r8, r4
 80073be:	e7bf      	b.n	8007340 <__ieee754_sqrt+0xdc>
 80073c0:	7ff00000 	.word	0x7ff00000

080073c4 <fabs>:
 80073c4:	ec51 0b10 	vmov	r0, r1, d0
 80073c8:	ee10 2a10 	vmov	r2, s0
 80073cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073d0:	ec43 2b10 	vmov	d0, r2, r3
 80073d4:	4770      	bx	lr

080073d6 <finite>:
 80073d6:	ee10 3a90 	vmov	r3, s1
 80073da:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80073de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80073e2:	0fc0      	lsrs	r0, r0, #31
 80073e4:	4770      	bx	lr

080073e6 <matherr>:
 80073e6:	2000      	movs	r0, #0
 80073e8:	4770      	bx	lr
 80073ea:	0000      	movs	r0, r0
 80073ec:	0000      	movs	r0, r0
	...

080073f0 <nan>:
 80073f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80073f8 <nan+0x8>
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	00000000 	.word	0x00000000
 80073fc:	7ff80000 	.word	0x7ff80000

08007400 <rint>:
 8007400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007402:	ec51 0b10 	vmov	r0, r1, d0
 8007406:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800740a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800740e:	2e13      	cmp	r6, #19
 8007410:	460b      	mov	r3, r1
 8007412:	ee10 4a10 	vmov	r4, s0
 8007416:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800741a:	dc56      	bgt.n	80074ca <rint+0xca>
 800741c:	2e00      	cmp	r6, #0
 800741e:	da2b      	bge.n	8007478 <rint+0x78>
 8007420:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007424:	4302      	orrs	r2, r0
 8007426:	d023      	beq.n	8007470 <rint+0x70>
 8007428:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800742c:	4302      	orrs	r2, r0
 800742e:	4254      	negs	r4, r2
 8007430:	4314      	orrs	r4, r2
 8007432:	0c4b      	lsrs	r3, r1, #17
 8007434:	0b24      	lsrs	r4, r4, #12
 8007436:	045b      	lsls	r3, r3, #17
 8007438:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800743c:	ea44 0103 	orr.w	r1, r4, r3
 8007440:	460b      	mov	r3, r1
 8007442:	492f      	ldr	r1, [pc, #188]	; (8007500 <rint+0x100>)
 8007444:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007448:	e9d1 6700 	ldrd	r6, r7, [r1]
 800744c:	4602      	mov	r2, r0
 800744e:	4639      	mov	r1, r7
 8007450:	4630      	mov	r0, r6
 8007452:	f7f8 ff33 	bl	80002bc <__adddf3>
 8007456:	e9cd 0100 	strd	r0, r1, [sp]
 800745a:	463b      	mov	r3, r7
 800745c:	4632      	mov	r2, r6
 800745e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007462:	f7f8 ff29 	bl	80002b8 <__aeabi_dsub>
 8007466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800746a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800746e:	4639      	mov	r1, r7
 8007470:	ec41 0b10 	vmov	d0, r0, r1
 8007474:	b003      	add	sp, #12
 8007476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <rint+0x104>)
 800747a:	4132      	asrs	r2, r6
 800747c:	ea01 0702 	and.w	r7, r1, r2
 8007480:	4307      	orrs	r7, r0
 8007482:	d0f5      	beq.n	8007470 <rint+0x70>
 8007484:	0852      	lsrs	r2, r2, #1
 8007486:	4011      	ands	r1, r2
 8007488:	430c      	orrs	r4, r1
 800748a:	d00b      	beq.n	80074a4 <rint+0xa4>
 800748c:	ea23 0202 	bic.w	r2, r3, r2
 8007490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007494:	2e13      	cmp	r6, #19
 8007496:	fa43 f306 	asr.w	r3, r3, r6
 800749a:	bf0c      	ite	eq
 800749c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80074a0:	2400      	movne	r4, #0
 80074a2:	4313      	orrs	r3, r2
 80074a4:	4916      	ldr	r1, [pc, #88]	; (8007500 <rint+0x100>)
 80074a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80074aa:	4622      	mov	r2, r4
 80074ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074b0:	4620      	mov	r0, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7f8 ff02 	bl	80002bc <__adddf3>
 80074b8:	e9cd 0100 	strd	r0, r1, [sp]
 80074bc:	4622      	mov	r2, r4
 80074be:	462b      	mov	r3, r5
 80074c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c4:	f7f8 fef8 	bl	80002b8 <__aeabi_dsub>
 80074c8:	e7d2      	b.n	8007470 <rint+0x70>
 80074ca:	2e33      	cmp	r6, #51	; 0x33
 80074cc:	dd07      	ble.n	80074de <rint+0xde>
 80074ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074d2:	d1cd      	bne.n	8007470 <rint+0x70>
 80074d4:	ee10 2a10 	vmov	r2, s0
 80074d8:	f7f8 fef0 	bl	80002bc <__adddf3>
 80074dc:	e7c8      	b.n	8007470 <rint+0x70>
 80074de:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295
 80074e6:	40f2      	lsrs	r2, r6
 80074e8:	4210      	tst	r0, r2
 80074ea:	d0c1      	beq.n	8007470 <rint+0x70>
 80074ec:	0852      	lsrs	r2, r2, #1
 80074ee:	4210      	tst	r0, r2
 80074f0:	bf1f      	itttt	ne
 80074f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80074f6:	ea20 0202 	bicne.w	r2, r0, r2
 80074fa:	4134      	asrne	r4, r6
 80074fc:	4314      	orrne	r4, r2
 80074fe:	e7d1      	b.n	80074a4 <rint+0xa4>
 8007500:	08007ef0 	.word	0x08007ef0
 8007504:	000fffff 	.word	0x000fffff

08007508 <scalbn>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	ec55 4b10 	vmov	r4, r5, d0
 800750e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007512:	4606      	mov	r6, r0
 8007514:	462b      	mov	r3, r5
 8007516:	b9aa      	cbnz	r2, 8007544 <scalbn+0x3c>
 8007518:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800751c:	4323      	orrs	r3, r4
 800751e:	d03b      	beq.n	8007598 <scalbn+0x90>
 8007520:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <scalbn+0xe0>)
 8007522:	4629      	mov	r1, r5
 8007524:	2200      	movs	r2, #0
 8007526:	ee10 0a10 	vmov	r0, s0
 800752a:	f7f9 f87d 	bl	8000628 <__aeabi_dmul>
 800752e:	4b2f      	ldr	r3, [pc, #188]	; (80075ec <scalbn+0xe4>)
 8007530:	429e      	cmp	r6, r3
 8007532:	4604      	mov	r4, r0
 8007534:	460d      	mov	r5, r1
 8007536:	da12      	bge.n	800755e <scalbn+0x56>
 8007538:	a327      	add	r3, pc, #156	; (adr r3, 80075d8 <scalbn+0xd0>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f873 	bl	8000628 <__aeabi_dmul>
 8007542:	e009      	b.n	8007558 <scalbn+0x50>
 8007544:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007548:	428a      	cmp	r2, r1
 800754a:	d10c      	bne.n	8007566 <scalbn+0x5e>
 800754c:	ee10 2a10 	vmov	r2, s0
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f8 feb2 	bl	80002bc <__adddf3>
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	e01c      	b.n	8007598 <scalbn+0x90>
 800755e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007562:	460b      	mov	r3, r1
 8007564:	3a36      	subs	r2, #54	; 0x36
 8007566:	4432      	add	r2, r6
 8007568:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800756c:	428a      	cmp	r2, r1
 800756e:	dd0b      	ble.n	8007588 <scalbn+0x80>
 8007570:	ec45 4b11 	vmov	d1, r4, r5
 8007574:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80075e0 <scalbn+0xd8>
 8007578:	f000 f83c 	bl	80075f4 <copysign>
 800757c:	a318      	add	r3, pc, #96	; (adr r3, 80075e0 <scalbn+0xd8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	ec51 0b10 	vmov	r0, r1, d0
 8007586:	e7da      	b.n	800753e <scalbn+0x36>
 8007588:	2a00      	cmp	r2, #0
 800758a:	dd08      	ble.n	800759e <scalbn+0x96>
 800758c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007598:	ec45 4b10 	vmov	d0, r4, r5
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075a2:	da0d      	bge.n	80075c0 <scalbn+0xb8>
 80075a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075a8:	429e      	cmp	r6, r3
 80075aa:	ec45 4b11 	vmov	d1, r4, r5
 80075ae:	dce1      	bgt.n	8007574 <scalbn+0x6c>
 80075b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80075d8 <scalbn+0xd0>
 80075b4:	f000 f81e 	bl	80075f4 <copysign>
 80075b8:	a307      	add	r3, pc, #28	; (adr r3, 80075d8 <scalbn+0xd0>)
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	e7e0      	b.n	8007582 <scalbn+0x7a>
 80075c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075c4:	3236      	adds	r2, #54	; 0x36
 80075c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	2200      	movs	r2, #0
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <scalbn+0xe8>)
 80075d6:	e7b2      	b.n	800753e <scalbn+0x36>
 80075d8:	c2f8f359 	.word	0xc2f8f359
 80075dc:	01a56e1f 	.word	0x01a56e1f
 80075e0:	8800759c 	.word	0x8800759c
 80075e4:	7e37e43c 	.word	0x7e37e43c
 80075e8:	43500000 	.word	0x43500000
 80075ec:	ffff3cb0 	.word	0xffff3cb0
 80075f0:	3c900000 	.word	0x3c900000

080075f4 <copysign>:
 80075f4:	ec51 0b10 	vmov	r0, r1, d0
 80075f8:	ee11 0a90 	vmov	r0, s3
 80075fc:	ee10 2a10 	vmov	r2, s0
 8007600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007604:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007608:	ea41 0300 	orr.w	r3, r1, r0
 800760c:	ec43 2b10 	vmov	d0, r2, r3
 8007610:	4770      	bx	lr
	...

08007614 <_init>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr

08007620 <_fini>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr
